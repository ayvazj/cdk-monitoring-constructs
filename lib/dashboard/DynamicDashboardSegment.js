"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticSegmentDynamicAdapter = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const DefaultDashboardFactory_1 = require("./DefaultDashboardFactory");
class StaticSegmentDynamicAdapter {
    constructor(props) {
        this.props = props;
    }
    /**
     * Adapts an IDashboardSegment to the IDynamicDashboardSegment interface by using
     * overrideProps to determine if a segment should be shown on a specific dashboard.
     * The default values are true, so consumers must set these to false if they would
     * like to hide these items from dashboards
     */
    widgetsForDashboard(name) {
        const overrideProps = this.props.overrideProps;
        const addToDetailDashboard = overrideProps?.addToDetailDashboard ?? true;
        const addToSummaryDashboard = overrideProps?.addToSummaryDashboard ?? true;
        const addToAlarmsDashboard = overrideProps?.addToAlarmDashboard ?? true;
        if (addToDetailDashboard && name === DefaultDashboardFactory_1.DefaultDashboards.DETAIL) {
            return this.props.segment.widgets();
        }
        if (addToSummaryDashboard && name === DefaultDashboardFactory_1.DefaultDashboards.SUMMARY) {
            return this.props.segment.summaryWidgets();
        }
        if (addToAlarmsDashboard && name === DefaultDashboardFactory_1.DefaultDashboards.ALARMS) {
            return this.props.segment.alarmWidgets();
        }
        return [];
    }
}
exports.StaticSegmentDynamicAdapter = StaticSegmentDynamicAdapter;
_a = JSII_RTTI_SYMBOL_1;
StaticSegmentDynamicAdapter[_a] = { fqn: "cdk-monitoring-constructs.StaticSegmentDynamicAdapter", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHluYW1pY0Rhc2hib2FyZFNlZ21lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEeW5hbWljRGFzaGJvYXJkU2VnbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHVFQUE4RDtBQVc5RCxNQUFhLDJCQUEyQjtJQUd0QyxZQUFZLEtBQTZCO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILG1CQUFtQixDQUFDLElBQVk7UUFDOUIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDL0MsTUFBTSxvQkFBb0IsR0FBRyxhQUFhLEVBQUUsb0JBQW9CLElBQUksSUFBSSxDQUFDO1FBQ3pFLE1BQU0scUJBQXFCLEdBQUcsYUFBYSxFQUFFLHFCQUFxQixJQUFJLElBQUksQ0FBQztRQUMzRSxNQUFNLG9CQUFvQixHQUFHLGFBQWEsRUFBRSxtQkFBbUIsSUFBSSxJQUFJLENBQUM7UUFDeEUsSUFBSSxvQkFBb0IsSUFBSSxJQUFJLEtBQUssMkNBQWlCLENBQUMsTUFBTSxFQUFFO1lBQzdELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDckM7UUFDRCxJQUFJLHFCQUFxQixJQUFJLElBQUksS0FBSywyQ0FBaUIsQ0FBQyxPQUFPLEVBQUU7WUFDL0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUM1QztRQUNELElBQUksb0JBQW9CLElBQUksSUFBSSxLQUFLLDJDQUFpQixDQUFDLE1BQU0sRUFBRTtZQUM3RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOztBQTVCSCxrRUE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJV2lkZ2V0IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgeyBEZWZhdWx0RGFzaGJvYXJkcyB9IGZyb20gXCIuL0RlZmF1bHREYXNoYm9hcmRGYWN0b3J5XCI7XG5pbXBvcnQgeyBJRGFzaGJvYXJkRmFjdG9yeVByb3BzIH0gZnJvbSBcIi4vSURhc2hib2FyZEZhY3RvcnlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJRHluYW1pY0Rhc2hib2FyZFNlZ21lbnQge1xuICAvKipcbiAgICogUmV0dXJucyB3aWRnZXRzIGZvciB0aGUgcmVxdWVzdGVkIGRhc2hib2FyZCB0eXBlLlxuICAgKiBAcGFyYW0gbmFtZSBuYW1lIG9mIGRhc2hib2FyZCBmb3Igd2hpY2ggd2lkZ2V0cyBhcmUgZ2VuZXJhdGVkLlxuICAgKi9cbiAgd2lkZ2V0c0ZvckRhc2hib2FyZChuYW1lOiBzdHJpbmcpOiBJV2lkZ2V0W107XG59XG5cbmV4cG9ydCBjbGFzcyBTdGF0aWNTZWdtZW50RHluYW1pY0FkYXB0ZXIgaW1wbGVtZW50cyBJRHluYW1pY0Rhc2hib2FyZFNlZ21lbnQge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcHJvcHM6IElEYXNoYm9hcmRGYWN0b3J5UHJvcHM7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IElEYXNoYm9hcmRGYWN0b3J5UHJvcHMpIHtcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIH1cblxuICAvKipcbiAgICogQWRhcHRzIGFuIElEYXNoYm9hcmRTZWdtZW50IHRvIHRoZSBJRHluYW1pY0Rhc2hib2FyZFNlZ21lbnQgaW50ZXJmYWNlIGJ5IHVzaW5nXG4gICAqIG92ZXJyaWRlUHJvcHMgdG8gZGV0ZXJtaW5lIGlmIGEgc2VnbWVudCBzaG91bGQgYmUgc2hvd24gb24gYSBzcGVjaWZpYyBkYXNoYm9hcmQuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlcyBhcmUgdHJ1ZSwgc28gY29uc3VtZXJzIG11c3Qgc2V0IHRoZXNlIHRvIGZhbHNlIGlmIHRoZXkgd291bGRcbiAgICogbGlrZSB0byBoaWRlIHRoZXNlIGl0ZW1zIGZyb20gZGFzaGJvYXJkc1xuICAgKi9cbiAgd2lkZ2V0c0ZvckRhc2hib2FyZChuYW1lOiBzdHJpbmcpOiBJV2lkZ2V0W10ge1xuICAgIGNvbnN0IG92ZXJyaWRlUHJvcHMgPSB0aGlzLnByb3BzLm92ZXJyaWRlUHJvcHM7XG4gICAgY29uc3QgYWRkVG9EZXRhaWxEYXNoYm9hcmQgPSBvdmVycmlkZVByb3BzPy5hZGRUb0RldGFpbERhc2hib2FyZCA/PyB0cnVlO1xuICAgIGNvbnN0IGFkZFRvU3VtbWFyeURhc2hib2FyZCA9IG92ZXJyaWRlUHJvcHM/LmFkZFRvU3VtbWFyeURhc2hib2FyZCA/PyB0cnVlO1xuICAgIGNvbnN0IGFkZFRvQWxhcm1zRGFzaGJvYXJkID0gb3ZlcnJpZGVQcm9wcz8uYWRkVG9BbGFybURhc2hib2FyZCA/PyB0cnVlO1xuICAgIGlmIChhZGRUb0RldGFpbERhc2hib2FyZCAmJiBuYW1lID09PSBEZWZhdWx0RGFzaGJvYXJkcy5ERVRBSUwpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlZ21lbnQud2lkZ2V0cygpO1xuICAgIH1cbiAgICBpZiAoYWRkVG9TdW1tYXJ5RGFzaGJvYXJkICYmIG5hbWUgPT09IERlZmF1bHREYXNoYm9hcmRzLlNVTU1BUlkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlZ21lbnQuc3VtbWFyeVdpZGdldHMoKTtcbiAgICB9XG4gICAgaWYgKGFkZFRvQWxhcm1zRGFzaGJvYXJkICYmIG5hbWUgPT09IERlZmF1bHREYXNoYm9hcmRzLkFMQVJNUykge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2VnbWVudC5hbGFybVdpZGdldHMoKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4iXX0=