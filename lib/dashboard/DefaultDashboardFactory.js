"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultDashboardFactory = exports.DefaultDashboards = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
const BitmapDashboard_1 = require("./BitmapDashboard");
const DashboardRenderingPreference_1 = require("./DashboardRenderingPreference");
const DashboardWithBitmapCopy_1 = require("./DashboardWithBitmapCopy");
var DefaultDashboards;
(function (DefaultDashboards) {
    DefaultDashboards["SUMMARY"] = "Summary";
    DefaultDashboards["DETAIL"] = "Detail";
    DefaultDashboards["ALARMS"] = "Alarms";
})(DefaultDashboards = exports.DefaultDashboards || (exports.DefaultDashboards = {}));
class DefaultDashboardFactory extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Dynamic Dashboard Fields
        this.dashboards = {};
        const createDashboard = props.createDashboard ?? true;
        const createSummaryDashboard = props.createSummaryDashboard ?? false;
        const createAlarmDashboard = props.createAlarmDashboard ?? false;
        const shouldCreateDashboards = createDashboard || createAlarmDashboard || createSummaryDashboard;
        if (shouldCreateDashboards && !props.dashboardNamePrefix) {
            throw Error("A non-empty dashboardNamePrefix is required if dashboards are being created");
        }
        const renderingPreference = props.renderingPreference ??
            DashboardRenderingPreference_1.DashboardRenderingPreference.INTERACTIVE_ONLY;
        const detailStart = "-" + (props.detailDashboardRange ?? aws_cdk_lib_1.Duration.hours(8)).toIsoString();
        const summaryStart = "-" + (props.summaryDashboardRange ?? aws_cdk_lib_1.Duration.days(14)).toIsoString();
        let anyDashboardCreated = false;
        if (createDashboard) {
            anyDashboardCreated = true;
            this.dashboard = this.createDashboard(renderingPreference, "Dashboard", {
                dashboardName: props.dashboardNamePrefix,
                start: detailStart,
                periodOverride: props.detailDashboardPeriodOverride ?? aws_cloudwatch_1.PeriodOverride.INHERIT,
            });
            this.dashboards[DefaultDashboards.DETAIL] = this.dashboard;
        }
        if (createSummaryDashboard) {
            anyDashboardCreated = true;
            this.summaryDashboard = this.createDashboard(renderingPreference, "SummaryDashboard", {
                dashboardName: `${props.dashboardNamePrefix}-Summary`,
                start: summaryStart,
                periodOverride: props.summaryDashboardPeriodOverride ?? aws_cloudwatch_1.PeriodOverride.INHERIT,
            });
            this.dashboards[DefaultDashboards.SUMMARY] = this.summaryDashboard;
        }
        if (createAlarmDashboard) {
            anyDashboardCreated = true;
            this.alarmDashboard = this.createDashboard(renderingPreference, "AlarmDashboard", {
                dashboardName: `${props.dashboardNamePrefix}-Alarms`,
                start: detailStart,
                periodOverride: props.detailDashboardPeriodOverride ?? aws_cloudwatch_1.PeriodOverride.INHERIT,
            });
            this.dashboards[DefaultDashboards.ALARMS] = this.alarmDashboard;
        }
        this.anyDashboardCreated = anyDashboardCreated;
    }
    addSegment(props) {
        if ((props.overrideProps?.addToDetailDashboard ?? true) && this.dashboard) {
            this.dashboard.addWidgets(...props.segment.widgets());
        }
        if ((props.overrideProps?.addToSummaryDashboard ?? true) &&
            this.summaryDashboard) {
            this.summaryDashboard.addWidgets(...props.segment.summaryWidgets());
        }
        if ((props.overrideProps?.addToAlarmDashboard ?? true) &&
            this.alarmDashboard) {
            this.alarmDashboard.addWidgets(...props.segment.alarmWidgets());
        }
    }
    addDynamicSegment(segment) {
        this.dashboard?.addWidgets(...segment.widgetsForDashboard(DefaultDashboards.DETAIL));
        this.summaryDashboard?.addWidgets(...segment.widgetsForDashboard(DefaultDashboards.SUMMARY));
        this.alarmDashboard?.addWidgets(...segment.widgetsForDashboard(DefaultDashboards.ALARMS));
    }
    createDashboard(renderingPreference, id, props) {
        switch (renderingPreference) {
            case DashboardRenderingPreference_1.DashboardRenderingPreference.INTERACTIVE_ONLY:
                return new aws_cloudwatch_1.Dashboard(this, id, props);
            case DashboardRenderingPreference_1.DashboardRenderingPreference.BITMAP_ONLY:
                return new BitmapDashboard_1.BitmapDashboard(this, id, props);
            case DashboardRenderingPreference_1.DashboardRenderingPreference.INTERACTIVE_AND_BITMAP:
                return new DashboardWithBitmapCopy_1.DashboardWithBitmapCopy(this, id, props);
        }
    }
    createdDashboard() {
        return this.dashboard;
    }
    createdSummaryDashboard() {
        return this.summaryDashboard;
    }
    createdAlarmDashboard() {
        return this.alarmDashboard;
    }
    getDashboard(name) {
        switch (name) {
            case DefaultDashboards.SUMMARY:
                return this.summaryDashboard;
            case DefaultDashboards.DETAIL:
                return this.dashboard;
            case DefaultDashboards.ALARMS:
                return this.alarmDashboard;
            default:
                throw new Error("Unexpected dashboard name!");
        }
    }
}
exports.DefaultDashboardFactory = DefaultDashboardFactory;
_a = JSII_RTTI_SYMBOL_1;
DefaultDashboardFactory[_a] = { fqn: "cdk-monitoring-constructs.DefaultDashboardFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,