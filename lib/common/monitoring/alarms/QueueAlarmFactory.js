"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueAlarmFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
class QueueAlarmFactory {
    constructor(alarmFactory) {
        this.alarmFactory = alarmFactory;
    }
    addMinQueueMessageCountAlarm(metric, props, disambiguator) {
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.MISSING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.LESS_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: props.minMessageCount,
            alarmNameSuffix: "Queue-Message-Count-Min",
            alarmDescription: `Number of messages in the queue is too low.`,
            // we will dedupe any kind of message count issue to the same ticket
            alarmDedupeStringSuffix: "AnyQueueMessageCount",
        });
    }
    addMaxQueueMessageCountAlarm(metric, props, disambiguator) {
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.MISSING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: props.maxMessageCount,
            alarmNameSuffix: "Queue-Message-Count-Max",
            alarmDescription: `Number of messages in the queue is too high.`,
            // we will dedupe any kind of message count issue to the same ticket
            alarmDedupeStringSuffix: "AnyQueueMessageCount",
        });
    }
    addMaxQueueMessageAgeAlarm(metric, props, disambiguator) {
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.MISSING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: props.maxAgeInSeconds,
            alarmNameSuffix: "Queue-Message-Age-Max",
            alarmDescription: `Age of the oldest message in the queue is too high.`,
        });
    }
    addMaxQueueTimeToDrainMessagesAlarm(metric, props, disambiguator) {
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.NOT_BREACHING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: props.maxTimeToDrain.toSeconds(),
            alarmNameSuffix: "Queue-TimeToDrain-Max",
            alarmDescription: `Time to drain messages in the queue is too high.`,
        });
    }
    addMinQueueIncomingMessagesCountAlarm(metric, props, disambiguator) {
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.MISSING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.LESS_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: props.minIncomingMessagesCount,
            alarmNameSuffix: "Queue-Incoming-Messages-Count-Min",
            alarmDescription: `Number of incoming messages into the queue is too low.`,
        });
    }
    addMaxQueueIncomingMessagesCountAlarm(metric, props, disambiguator) {
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.MISSING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: props.maxIncomingMessagesCount,
            alarmNameSuffix: "Queue-Incoming-Messages-Count-Max",
            alarmDescription: `Number of incoming messages into the queue is too high.`,
        });
    }
}
exports.QueueAlarmFactory = QueueAlarmFactory;
_a = JSII_RTTI_SYMBOL_1;
QueueAlarmFactory[_a] = { fqn: "cdk-monitoring-constructs.QueueAlarmFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,