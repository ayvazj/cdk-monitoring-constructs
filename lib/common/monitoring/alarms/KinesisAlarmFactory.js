"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisAlarmFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
class KinesisAlarmFactory {
    constructor(alarmFactory) {
        this.alarmFactory = alarmFactory;
    }
    addIteratorMaxAgeAlarm(metric, props, disambiguator) {
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.MISSING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: props.maxAgeInMillis,
            alarmNameSuffix: "Iterator-Age-Max",
            alarmDescription: `Iterator Max Age is too high.`,
            // we will dedupe any kind of message count issue to the same ticket
            alarmDedupeStringSuffix: "AnyDataStreamIteratorMaxAge",
        });
    }
    addPutRecordsThrottledAlarm(metric, props, disambiguator) {
        const threshold = props.maxRecordsThrottledThreshold;
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.NOT_BREACHING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold: threshold,
            alarmNameSuffix: "PutRecordsThrottled",
            alarmDescription: `Number of throttled PutRecords exceeded threshold of ${threshold}`,
            // we will dedupe any kind of message count issue to the same ticket
            alarmDedupeStringSuffix: "PutRecordsThrottled",
        });
    }
    addPutRecordsFailedAlarm(metric, props, disambiguator) {
        const threshold = props.maxRecordsFailedThreshold;
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.NOT_BREACHING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold,
            alarmNameSuffix: "PutRecordsFailed",
            alarmDescription: `Number of failed PutRecords exceeded threshold of ${threshold}`,
            // we will dedupe any kind of message count issue to the same ticket
            alarmDedupeStringSuffix: "PutRecordsFailed",
        });
    }
    addFirehoseStreamExceedSafetyThresholdAlarm(metric, metricName, quotaName, props, disambiguator) {
        const threshold = props.safetyThresholdLimit;
        if (threshold < 0 || threshold >= 1) {
            throw new Error(`safetyThresholdLimit must be in range [0.0, 1.0) for ${metricName}ExceedThresholdAlarm.`);
        }
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.NOT_BREACHING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold,
            alarmNameSuffix: metricName,
            alarmDescription: `${metricName} exceeded ${quotaName} alarming threshold of ${threshold}`,
            // we will dedupe any kind of message count issue to the same ticket
            alarmDedupeStringSuffix: `${metricName}ExceedThresholdLimit`,
        });
    }
    addProvisionedReadThroughputExceededAlarm(metric, props, disambiguator) {
        const threshold = props.maxRecordsThrottledThreshold;
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.NOT_BREACHING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold,
            alarmNameSuffix: "ReadThroughputExceeded",
            alarmDescription: `Number of records resulting in read throughput capacity throttling reached the threshold of ${threshold}.`,
        });
    }
    addProvisionedWriteThroughputExceededAlarm(metric, props, disambiguator) {
        const threshold = props.maxRecordsThrottledThreshold;
        return this.alarmFactory.addAlarm(metric, {
            treatMissingData: props.treatMissingDataOverride ?? aws_cloudwatch_1.TreatMissingData.NOT_BREACHING,
            comparisonOperator: props.comparisonOperatorOverride ??
                aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            ...props,
            disambiguator,
            threshold,
            alarmNameSuffix: "WriteThroughputExceeded",
            alarmDescription: `Number of records resulting in write throughput capacity throttling reached the threshold of ${threshold}.`,
        });
    }
}
exports.KinesisAlarmFactory = KinesisAlarmFactory;
_a = JSII_RTTI_SYMBOL_1;
KinesisAlarmFactory[_a] = { fqn: "cdk-monitoring-constructs.KinesisAlarmFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,