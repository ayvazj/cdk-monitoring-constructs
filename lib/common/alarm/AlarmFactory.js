"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlarmFactory = exports.CompositeAlarmOperator = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const action_1 = require("./action");
const AlarmNamingStrategy_1 = require("./AlarmNamingStrategy");
const IAlarmAnnotationStrategy_1 = require("./IAlarmAnnotationStrategy");
const metric_adjuster_1 = require("./metric-adjuster");
const metric_1 = require("../metric");
const DefaultDatapointsToAlarm = 3;
var CompositeAlarmOperator;
(function (CompositeAlarmOperator) {
    /**
     * trigger only if all the alarms are triggered
     */
    CompositeAlarmOperator[CompositeAlarmOperator["AND"] = 0] = "AND";
    /**
     * trigger if any of the alarms is triggered
     */
    CompositeAlarmOperator[CompositeAlarmOperator["OR"] = 1] = "OR";
})(CompositeAlarmOperator = exports.CompositeAlarmOperator || (exports.CompositeAlarmOperator = {}));
class AlarmFactory {
    constructor(alarmScope, props) {
        this.alarmScope = alarmScope;
        this.globalAlarmDefaults = props.globalAlarmDefaults;
        this.globalMetricDefaults = props.globalMetricDefaults;
        this.alarmNamingStrategy =
            props.globalAlarmDefaults.alarmNamingStrategy ??
                new AlarmNamingStrategy_1.AlarmNamingStrategy(props.globalAlarmDefaults.alarmNamePrefix, props.localAlarmNamePrefix, props.globalAlarmDefaults.dedupeStringProcessor);
    }
    addAlarm(metric, props) {
        // adjust the metric
        const metricAdjuster = props.metricAdjuster
            ? metric_adjuster_1.CompositeMetricAdjuster.of(props.metricAdjuster, metric_adjuster_1.DefaultMetricAdjuster.INSTANCE)
            : metric_adjuster_1.DefaultMetricAdjuster.INSTANCE;
        const adjustedMetric = metricAdjuster.adjustMetric(metric, this.alarmScope, props);
        // metric that will be ultimately used to create the alarm
        let alarmMetric = adjustedMetric;
        // prepare primary alarm properties
        const actionsEnabled = this.determineActionsEnabled(props.actionsEnabled, props.disambiguator);
        const action = this.determineAction(props.disambiguator, props.actionOverride);
        const alarmName = this.alarmNamingStrategy.getName(props);
        const alarmNameSuffix = props.alarmNameSuffix;
        const alarmLabel = this.alarmNamingStrategy.getWidgetLabel(props);
        const alarmDescription = this.generateDescription(props.alarmDescription, props.alarmDescriptionOverride, props.runbookLink, props.documentationLink);
        const dedupeString = this.alarmNamingStrategy.getDedupeString(props);
        const evaluateLowSampleCountPercentile = props.evaluateLowSampleCountPercentile ?? true;
        const datapointsToAlarm = props.datapointsToAlarm ??
            this.globalAlarmDefaults.datapointsToAlarm ??
            DefaultDatapointsToAlarm;
        const evaluationPeriods = props.evaluationPeriods ??
            this.globalAlarmDefaults.evaluationPeriods ??
            datapointsToAlarm;
        if (evaluationPeriods < datapointsToAlarm) {
            throw new Error(`evaluationPeriods must be greater than or equal to datapointsToAlarm for ${alarmName}`);
        }
        // apply metric math for minimum metric samples
        if (props.minSampleCountToEvaluateDatapoint) {
            let label = `${adjustedMetric}`;
            let metricExpression;
            let metricSampleCountId = "sampleCount";
            let usingMetrics;
            if (adjustedMetric instanceof aws_cloudwatch_1.MathExpression) {
                label = adjustedMetric.label ?? label;
                metricExpression = `(${adjustedMetric.expression})`;
                if (Object.keys(adjustedMetric.usingMetrics).length === 1) {
                    const sampleCountMetric = adjustedMetric.usingMetrics[Object.keys(adjustedMetric.usingMetrics)[0]].with({
                        statistic: metric_1.MetricStatistic.N,
                        label: "Sample count",
                    });
                    usingMetrics = {
                        ...adjustedMetric.usingMetrics,
                        [metricSampleCountId]: sampleCountMetric,
                    };
                }
                else if (props.sampleCountMetricId) {
                    usingMetrics = adjustedMetric.usingMetrics;
                    metricSampleCountId = props.sampleCountMetricId;
                }
                else {
                    throw new Error("sampleCountMetricId must be specified when using minSampleCountToEvaluateDatapoint with a multiple-metric MathExpression");
                }
            }
            else {
                const metricId = "metric";
                metricExpression = metricId;
                usingMetrics = {
                    [metricId]: adjustedMetric,
                    [metricSampleCountId]: adjustedMetric.with({
                        statistic: metric_1.MetricStatistic.N,
                        label: "Sample count",
                    }),
                };
            }
            alarmMetric = new aws_cloudwatch_1.MathExpression({
                label,
                expression: `IF(${metricSampleCountId} > ${props.minSampleCountToEvaluateDatapoint}, ${metricExpression})`,
                period: adjustedMetric.period,
                usingMetrics,
            });
        }
        // create primary alarm
        const primaryAlarm = alarmMetric.createAlarm(this.alarmScope, alarmName, {
            alarmName,
            alarmDescription,
            threshold: props.threshold,
            comparisonOperator: props.comparisonOperator,
            treatMissingData: props.treatMissingData,
            // default value (undefined) means "evaluate"
            evaluateLowSampleCountPercentile: evaluateLowSampleCountPercentile
                ? undefined
                : "ignore",
            datapointsToAlarm,
            evaluationPeriods,
            actionsEnabled,
        });
        let alarm = primaryAlarm;
        // create composite alarm for min metric samples (if defined)
        // deprecated in favour of minSampleCountToEvaluateDatapoint
        if (!props.minSampleCountToEvaluateDatapoint &&
            props.minMetricSamplesToAlarm) {
            const metricSampleCount = adjustedMetric.with({
                statistic: metric_1.MetricStatistic.N,
            });
            const noSamplesAlarm = metricSampleCount.createAlarm(this.alarmScope, `${alarmName}-NoSamples`, {
                alarmName: `${alarmName}-NoSamples`,
                alarmDescription: `The metric (${adjustedMetric}) does not have enough samples to alarm. Must have at least ${props.minMetricSamplesToAlarm}.`,
                threshold: props.minMetricSamplesToAlarm,
                comparisonOperator: aws_cloudwatch_1.ComparisonOperator.LESS_THAN_THRESHOLD,
                treatMissingData: aws_cloudwatch_1.TreatMissingData.BREACHING,
                datapointsToAlarm: 1,
                evaluationPeriods: 1,
                actionsEnabled,
            });
            alarm = new aws_cloudwatch_1.CompositeAlarm(this.alarmScope, `${alarmName}-WithSamples`, {
                actionsEnabled,
                compositeAlarmName: `${alarmName}-WithSamples`,
                alarmDescription: this.joinDescriptionParts(alarmDescription, `Min number of samples to alarm: ${props.minMetricSamplesToAlarm}`),
                alarmRule: aws_cloudwatch_1.AlarmRule.allOf(aws_cloudwatch_1.AlarmRule.fromAlarm(primaryAlarm, aws_cloudwatch_1.AlarmState.ALARM), aws_cloudwatch_1.AlarmRule.not(aws_cloudwatch_1.AlarmRule.fromAlarm(noSamplesAlarm, aws_cloudwatch_1.AlarmState.ALARM))),
            });
        }
        // attach alarm actions
        action.addAlarmActions({
            alarm,
            action,
            dedupeString,
            disambiguator: props.disambiguator,
            customTags: props.customTags ?? [],
            customParams: props.customParams ?? {},
        });
        // create annotation for the primary alarm
        const annotation = this.createAnnotation({
            alarm: primaryAlarm,
            action,
            metric: adjustedMetric,
            evaluationPeriods,
            datapointsToAlarm,
            dedupeString,
            minMetricSamplesToAlarm: props.minMetricSamplesToAlarm,
            minSampleCountToEvaluateDatapoint: props.minSampleCountToEvaluateDatapoint,
            fillAlarmRange: props.fillAlarmRange ?? false,
            overrideAnnotationColor: props.overrideAnnotationColor,
            overrideAnnotationLabel: props.overrideAnnotationLabel,
            overrideAnnotationVisibility: props.overrideAnnotationVisibility,
            comparisonOperator: props.comparisonOperator,
            threshold: props.threshold,
            disambiguator: props.disambiguator,
            customTags: props.customTags ?? [],
            customParams: props.customParams ?? {},
        });
        // return the final result
        return {
            alarm,
            action,
            alarmName,
            alarmNameSuffix,
            alarmLabel,
            alarmDescription,
            customTags: props.customTags,
            customParams: props.customParams,
            alarmRuleWhenOk: aws_cloudwatch_1.AlarmRule.fromAlarm(alarm, aws_cloudwatch_1.AlarmState.OK),
            alarmRuleWhenAlarming: aws_cloudwatch_1.AlarmRule.fromAlarm(alarm, aws_cloudwatch_1.AlarmState.ALARM),
            alarmRuleWhenInsufficientData: aws_cloudwatch_1.AlarmRule.fromAlarm(alarm, aws_cloudwatch_1.AlarmState.INSUFFICIENT_DATA),
            dedupeString,
            annotation,
            disambiguator: props.disambiguator,
        };
    }
    addCompositeAlarm(alarms, props) {
        const actionsEnabled = this.determineActionsEnabled(props?.actionsEnabled, props?.disambiguator);
        const action = props.actionOverride ?? this.globalAlarmDefaults.action ?? action_1.noopAction();
        const namingInput = { alarmNameSuffix: "Composite", ...props };
        const alarmName = this.alarmNamingStrategy.getName(namingInput);
        const alarmDescription = this.generateDescription(props?.alarmDescription ?? "Composite alarm", props?.alarmDescriptionOverride, props?.runbookLink, props?.documentationLink);
        const dedupeString = this.alarmNamingStrategy.getDedupeString(namingInput);
        const alarmRule = this.determineCompositeAlarmRule(alarms, props);
        const alarm = new aws_cloudwatch_1.CompositeAlarm(this.alarmScope, alarmName, {
            compositeAlarmName: alarmName,
            alarmDescription,
            alarmRule,
            actionsEnabled,
        });
        action.addAlarmActions({
            alarm,
            action,
            dedupeString,
            disambiguator: props?.disambiguator,
            customTags: props?.customTags,
            customParams: props?.customParams,
        });
        return alarm;
    }
    determineCompositeAlarmRule(alarms, props) {
        const alarmRules = alarms.map((alarm) => alarm.alarmRuleWhenAlarming);
        const operator = props.compositeOperator ?? CompositeAlarmOperator.OR;
        switch (operator) {
            case CompositeAlarmOperator.AND:
                return aws_cloudwatch_1.AlarmRule.allOf(...alarmRules);
            case CompositeAlarmOperator.OR:
                return aws_cloudwatch_1.AlarmRule.anyOf(...alarmRules);
            default:
                throw new Error(`Unsupported composite alarm operator: ${operator}`);
        }
    }
    determineActionsEnabled(actionsEnabled, disambiguator) {
        if (actionsEnabled !== undefined) {
            // alarm-specific override to true or false
            return actionsEnabled;
        }
        if (typeof this.globalAlarmDefaults.actionsEnabled === "boolean") {
            // global defaults: boolean value
            return this.globalAlarmDefaults.actionsEnabled;
        }
        if (disambiguator) {
            // global defaults: disambiguator based value
            return this.globalAlarmDefaults.actionsEnabled[disambiguator] ?? false;
        }
        return false;
    }
    determineAction(disambiguator, actionOverride) {
        // Explicit override
        if (actionOverride) {
            return actionOverride;
        }
        // Default by disambiugator
        if (disambiguator &&
            this.globalAlarmDefaults.disambiguatorAction?.[disambiguator]) {
            return this.globalAlarmDefaults.disambiguatorAction[disambiguator];
        }
        // Default global action
        return this.globalAlarmDefaults.action ?? action_1.noopAction();
    }
    get shouldUseDefaultDedupeForError() {
        return this.globalAlarmDefaults.useDefaultDedupeForError ?? true;
    }
    get shouldUseDefaultDedupeForLatency() {
        return this.globalAlarmDefaults.useDefaultDedupeForLatency ?? true;
    }
    generateDescription(alarmDescription, alarmDescriptionOverride, runbookLinkOverride, documentationLinkOverride) {
        const parts = [alarmDescriptionOverride ?? alarmDescription];
        const runbookLink = runbookLinkOverride ?? this.globalAlarmDefaults.runbookLink;
        const documentationLink = documentationLinkOverride ?? this.globalAlarmDefaults.documentationLink;
        if (runbookLink) {
            parts.push(`Runbook: ${runbookLink}`);
        }
        if (documentationLink) {
            parts.push(`Documentation: ${documentationLink}`);
        }
        return this.joinDescriptionParts(...parts);
    }
    joinDescriptionParts(...parts) {
        return parts.join(" \r\n");
    }
    createAnnotation(props) {
        const strategy = this.globalAlarmDefaults.annotationStrategy ??
            new IAlarmAnnotationStrategy_1.DefaultAlarmAnnotationStrategy();
        return strategy.createAnnotation(props);
    }
}
exports.AlarmFactory = AlarmFactory;
_a = JSII_RTTI_SYMBOL_1;
AlarmFactory[_a] = { fqn: "cdk-monitoring-constructs.AlarmFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,