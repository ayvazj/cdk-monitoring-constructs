"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlarmNamingStrategy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const IAlarmDedupeStringProcessor_1 = require("./IAlarmDedupeStringProcessor");
const AlarmNamePartSeparator = "-";
const AlarmLabelPartSeparator = " ";
class AlarmNamingStrategy {
    constructor(globalPrefix, localPrefix, dedupeStringStrategy) {
        this.globalPrefix = globalPrefix;
        this.localPrefix = localPrefix;
        this.dedupeStringStrategy =
            dedupeStringStrategy ?? new IAlarmDedupeStringProcessor_1.DoNotModifyDedupeString();
    }
    /**
     * Alarm name is resolved like this:
     * - If "alarmNameOverride" is defined for an alarm, it will be used as alarm name.
     * - Otherwise, the alarm name will be generated by joining: global prefix, local prefix, alarm name suffix, disambiguator.
     *
     * @param props properties
     */
    getName(props) {
        if (props.alarmNameOverride) {
            return props.alarmNameOverride;
        }
        const parts = [
            this.globalPrefix,
            this.localPrefix,
            props.alarmNameSuffix,
        ];
        if (props.disambiguator) {
            parts.push(props.disambiguator);
        }
        return this.joinDistinct(parts, AlarmNamePartSeparator);
    }
    getWidgetLabel(props) {
        // not using global prefix to make the label shorter
        const parts = [this.localPrefix, props.alarmNameSuffix];
        if (props.disambiguator) {
            parts.push(props.disambiguator);
        }
        return this.joinDistinct(parts, AlarmLabelPartSeparator);
    }
    /**
     * Dedupe string resolved like this:
     * - If "dedupeStringOverride" is defined for an alarm, it will be used as a dedupe string.
     * - If "alarmDedupeStringSuffix" from the alarm factory is defined, "GlobalPrefix-LocalPrefix-AlarmDedupeStringSuffix" will be used as a dedupe string.
     * - Otherwise, the alarm dedupe string will not be set.
     * If a dedupe string strategy is set, it will be used to process the final string.
     *
     * @param props properties
     */
    getDedupeString(props) {
        if (props.dedupeStringOverride) {
            return this.dedupeStringStrategy.processDedupeStringOverride(props.dedupeStringOverride);
        }
        if (props.alarmDedupeStringSuffix) {
            // not using disambiguator here as we are still alarming on the same thing
            const parts = [
                this.globalPrefix,
                this.localPrefix,
                props.alarmDedupeStringSuffix,
            ];
            const dedupeString = this.joinDistinct(parts, AlarmNamePartSeparator);
            return this.dedupeStringStrategy.processDedupeString(dedupeString);
        }
        return undefined;
    }
    joinDistinct(parts, separator) {
        return parts.filter((x, i, a) => a.indexOf(x) == i).join(separator);
    }
}
exports.AlarmNamingStrategy = AlarmNamingStrategy;
_a = JSII_RTTI_SYMBOL_1;
AlarmNamingStrategy[_a] = { fqn: "cdk-monitoring-constructs.AlarmNamingStrategy", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWxhcm1OYW1pbmdTdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFsYXJtTmFtaW5nU3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrRUFHdUM7QUFHdkMsTUFBTSxzQkFBc0IsR0FBRyxHQUFHLENBQUM7QUFDbkMsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUM7QUFFcEMsTUFBYSxtQkFBbUI7SUFLOUIsWUFDRSxZQUFvQixFQUNwQixXQUFtQixFQUNuQixvQkFBa0Q7UUFFbEQsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLG9CQUFvQjtZQUN2QixvQkFBb0IsSUFBSSxJQUFJLHFEQUF1QixFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE9BQU8sQ0FBQyxLQUF1QjtRQUM3QixJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtZQUMzQixPQUFPLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztTQUNoQztRQUVELE1BQU0sS0FBSyxHQUFhO1lBQ3RCLElBQUksQ0FBQyxZQUFZO1lBQ2pCLElBQUksQ0FBQyxXQUFXO1lBQ2hCLEtBQUssQ0FBQyxlQUFlO1NBQ3RCLENBQUM7UUFFRixJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDakM7UUFFRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELGNBQWMsQ0FBQyxLQUF1QjtRQUNwQyxvREFBb0Q7UUFDcEQsTUFBTSxLQUFLLEdBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUVsRSxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDakM7UUFFRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsZUFBZSxDQUFDLEtBQXVCO1FBQ3JDLElBQUksS0FBSyxDQUFDLG9CQUFvQixFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLDJCQUEyQixDQUMxRCxLQUFLLENBQUMsb0JBQW9CLENBQzNCLENBQUM7U0FDSDtRQUVELElBQUksS0FBSyxDQUFDLHVCQUF1QixFQUFFO1lBQ2pDLDBFQUEwRTtZQUMxRSxNQUFNLEtBQUssR0FBRztnQkFDWixJQUFJLENBQUMsWUFBWTtnQkFDakIsSUFBSSxDQUFDLFdBQVc7Z0JBQ2hCLEtBQUssQ0FBQyx1QkFBdUI7YUFDOUIsQ0FBQztZQUNGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7WUFDdEUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDcEU7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRVMsWUFBWSxDQUFDLEtBQWUsRUFBRSxTQUFpQjtRQUN2RCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7QUFwRkgsa0RBcUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRG9Ob3RNb2RpZnlEZWR1cGVTdHJpbmcsXG4gIElBbGFybURlZHVwZVN0cmluZ1Byb2Nlc3Nvcixcbn0gZnJvbSBcIi4vSUFsYXJtRGVkdXBlU3RyaW5nUHJvY2Vzc29yXCI7XG5pbXBvcnQgeyBBbGFybU5hbWluZ0lucHV0LCBJQWxhcm1OYW1pbmdTdHJhdGVneSB9IGZyb20gXCIuL0lBbGFybU5hbWluZ1N0cmF0ZWd5XCI7XG5cbmNvbnN0IEFsYXJtTmFtZVBhcnRTZXBhcmF0b3IgPSBcIi1cIjtcbmNvbnN0IEFsYXJtTGFiZWxQYXJ0U2VwYXJhdG9yID0gXCIgXCI7XG5cbmV4cG9ydCBjbGFzcyBBbGFybU5hbWluZ1N0cmF0ZWd5IGltcGxlbWVudHMgSUFsYXJtTmFtaW5nU3RyYXRlZ3kge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZ2xvYmFsUHJlZml4OiBzdHJpbmc7XG4gIHByb3RlY3RlZCByZWFkb25seSBsb2NhbFByZWZpeDogc3RyaW5nO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGVkdXBlU3RyaW5nU3RyYXRlZ3k6IElBbGFybURlZHVwZVN0cmluZ1Byb2Nlc3NvcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBnbG9iYWxQcmVmaXg6IHN0cmluZyxcbiAgICBsb2NhbFByZWZpeDogc3RyaW5nLFxuICAgIGRlZHVwZVN0cmluZ1N0cmF0ZWd5PzogSUFsYXJtRGVkdXBlU3RyaW5nUHJvY2Vzc29yXG4gICkge1xuICAgIHRoaXMuZ2xvYmFsUHJlZml4ID0gZ2xvYmFsUHJlZml4O1xuICAgIHRoaXMubG9jYWxQcmVmaXggPSBsb2NhbFByZWZpeDtcbiAgICB0aGlzLmRlZHVwZVN0cmluZ1N0cmF0ZWd5ID1cbiAgICAgIGRlZHVwZVN0cmluZ1N0cmF0ZWd5ID8/IG5ldyBEb05vdE1vZGlmeURlZHVwZVN0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsYXJtIG5hbWUgaXMgcmVzb2x2ZWQgbGlrZSB0aGlzOlxuICAgKiAtIElmIFwiYWxhcm1OYW1lT3ZlcnJpZGVcIiBpcyBkZWZpbmVkIGZvciBhbiBhbGFybSwgaXQgd2lsbCBiZSB1c2VkIGFzIGFsYXJtIG5hbWUuXG4gICAqIC0gT3RoZXJ3aXNlLCB0aGUgYWxhcm0gbmFtZSB3aWxsIGJlIGdlbmVyYXRlZCBieSBqb2luaW5nOiBnbG9iYWwgcHJlZml4LCBsb2NhbCBwcmVmaXgsIGFsYXJtIG5hbWUgc3VmZml4LCBkaXNhbWJpZ3VhdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gcHJvcHMgcHJvcGVydGllc1xuICAgKi9cbiAgZ2V0TmFtZShwcm9wczogQWxhcm1OYW1pbmdJbnB1dCkge1xuICAgIGlmIChwcm9wcy5hbGFybU5hbWVPdmVycmlkZSkge1xuICAgICAgcmV0dXJuIHByb3BzLmFsYXJtTmFtZU92ZXJyaWRlO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnRzOiBzdHJpbmdbXSA9IFtcbiAgICAgIHRoaXMuZ2xvYmFsUHJlZml4LFxuICAgICAgdGhpcy5sb2NhbFByZWZpeCxcbiAgICAgIHByb3BzLmFsYXJtTmFtZVN1ZmZpeCxcbiAgICBdO1xuXG4gICAgaWYgKHByb3BzLmRpc2FtYmlndWF0b3IpIHtcbiAgICAgIHBhcnRzLnB1c2gocHJvcHMuZGlzYW1iaWd1YXRvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuam9pbkRpc3RpbmN0KHBhcnRzLCBBbGFybU5hbWVQYXJ0U2VwYXJhdG9yKTtcbiAgfVxuXG4gIGdldFdpZGdldExhYmVsKHByb3BzOiBBbGFybU5hbWluZ0lucHV0KSB7XG4gICAgLy8gbm90IHVzaW5nIGdsb2JhbCBwcmVmaXggdG8gbWFrZSB0aGUgbGFiZWwgc2hvcnRlclxuICAgIGNvbnN0IHBhcnRzOiBzdHJpbmdbXSA9IFt0aGlzLmxvY2FsUHJlZml4LCBwcm9wcy5hbGFybU5hbWVTdWZmaXhdO1xuXG4gICAgaWYgKHByb3BzLmRpc2FtYmlndWF0b3IpIHtcbiAgICAgIHBhcnRzLnB1c2gocHJvcHMuZGlzYW1iaWd1YXRvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuam9pbkRpc3RpbmN0KHBhcnRzLCBBbGFybUxhYmVsUGFydFNlcGFyYXRvcik7XG4gIH1cblxuICAvKipcbiAgICogRGVkdXBlIHN0cmluZyByZXNvbHZlZCBsaWtlIHRoaXM6XG4gICAqIC0gSWYgXCJkZWR1cGVTdHJpbmdPdmVycmlkZVwiIGlzIGRlZmluZWQgZm9yIGFuIGFsYXJtLCBpdCB3aWxsIGJlIHVzZWQgYXMgYSBkZWR1cGUgc3RyaW5nLlxuICAgKiAtIElmIFwiYWxhcm1EZWR1cGVTdHJpbmdTdWZmaXhcIiBmcm9tIHRoZSBhbGFybSBmYWN0b3J5IGlzIGRlZmluZWQsIFwiR2xvYmFsUHJlZml4LUxvY2FsUHJlZml4LUFsYXJtRGVkdXBlU3RyaW5nU3VmZml4XCIgd2lsbCBiZSB1c2VkIGFzIGEgZGVkdXBlIHN0cmluZy5cbiAgICogLSBPdGhlcndpc2UsIHRoZSBhbGFybSBkZWR1cGUgc3RyaW5nIHdpbGwgbm90IGJlIHNldC5cbiAgICogSWYgYSBkZWR1cGUgc3RyaW5nIHN0cmF0ZWd5IGlzIHNldCwgaXQgd2lsbCBiZSB1c2VkIHRvIHByb2Nlc3MgdGhlIGZpbmFsIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHByb3BzIHByb3BlcnRpZXNcbiAgICovXG4gIGdldERlZHVwZVN0cmluZyhwcm9wczogQWxhcm1OYW1pbmdJbnB1dCkge1xuICAgIGlmIChwcm9wcy5kZWR1cGVTdHJpbmdPdmVycmlkZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVkdXBlU3RyaW5nU3RyYXRlZ3kucHJvY2Vzc0RlZHVwZVN0cmluZ092ZXJyaWRlKFxuICAgICAgICBwcm9wcy5kZWR1cGVTdHJpbmdPdmVycmlkZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuYWxhcm1EZWR1cGVTdHJpbmdTdWZmaXgpIHtcbiAgICAgIC8vIG5vdCB1c2luZyBkaXNhbWJpZ3VhdG9yIGhlcmUgYXMgd2UgYXJlIHN0aWxsIGFsYXJtaW5nIG9uIHRoZSBzYW1lIHRoaW5nXG4gICAgICBjb25zdCBwYXJ0cyA9IFtcbiAgICAgICAgdGhpcy5nbG9iYWxQcmVmaXgsXG4gICAgICAgIHRoaXMubG9jYWxQcmVmaXgsXG4gICAgICAgIHByb3BzLmFsYXJtRGVkdXBlU3RyaW5nU3VmZml4LFxuICAgICAgXTtcbiAgICAgIGNvbnN0IGRlZHVwZVN0cmluZyA9IHRoaXMuam9pbkRpc3RpbmN0KHBhcnRzLCBBbGFybU5hbWVQYXJ0U2VwYXJhdG9yKTtcbiAgICAgIHJldHVybiB0aGlzLmRlZHVwZVN0cmluZ1N0cmF0ZWd5LnByb2Nlc3NEZWR1cGVTdHJpbmcoZGVkdXBlU3RyaW5nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJvdGVjdGVkIGpvaW5EaXN0aW5jdChwYXJ0czogc3RyaW5nW10sIHNlcGFyYXRvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcGFydHMuZmlsdGVyKCh4LCBpLCBhKSA9PiBhLmluZGV4T2YoeCkgPT0gaSkuam9pbihzZXBhcmF0b3IpO1xuICB9XG59XG4iXX0=