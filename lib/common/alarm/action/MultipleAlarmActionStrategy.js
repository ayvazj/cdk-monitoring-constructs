"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipleAlarmActionStrategy = exports.isMultipleAlarmActionStrategy = exports.multipleActions = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
function multipleActions(...actions) {
    return new MultipleAlarmActionStrategy(actions);
}
exports.multipleActions = multipleActions;
function isMultipleAlarmActionStrategy(obj) {
    return !!(obj && obj instanceof MultipleAlarmActionStrategy);
}
exports.isMultipleAlarmActionStrategy = isMultipleAlarmActionStrategy;
/**
 * Alarm action strategy that combines multiple actions in the same order as they were given.
 */
class MultipleAlarmActionStrategy {
    constructor(actions) {
        this.actions = actions;
    }
    addAlarmActions(props) {
        this.actions.forEach((action) => action.addAlarmActions(props));
    }
    /**
     * Returns list of alarm actions where any nested instances of MultipleAlarmActionStrategy
     * are flattened.
     *
     * @returns flattened list of alarm actions.
     */
    flattenedAlarmActions() {
        return this._flattenedAlarmActions(...this.actions);
    }
    _flattenedAlarmActions(...actions) {
        return actions.flatMap((action) => {
            if (isMultipleAlarmActionStrategy(action)) {
                return this._flattenedAlarmActions(action);
            }
            return [action];
        });
    }
}
exports.MultipleAlarmActionStrategy = MultipleAlarmActionStrategy;
_a = JSII_RTTI_SYMBOL_1;
MultipleAlarmActionStrategy[_a] = { fqn: "cdk-monitoring-constructs.MultipleAlarmActionStrategy", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVsdGlwbGVBbGFybUFjdGlvblN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTXVsdGlwbGVBbGFybUFjdGlvblN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsU0FBZ0IsZUFBZSxDQUFDLEdBQUcsT0FBK0I7SUFDaEUsT0FBTyxJQUFJLDJCQUEyQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFGRCwwQ0FFQztBQUVELFNBQWdCLDZCQUE2QixDQUMzQyxHQUFTO0lBRVQsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxZQUFZLDJCQUEyQixDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUpELHNFQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLDJCQUEyQjtJQUd0QyxZQUFZLE9BQStCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBK0I7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLHNCQUFzQixDQUM1QixHQUFHLE9BQStCO1FBRWxDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2hDLElBQUksNkJBQTZCLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzVDO1lBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUEvQkgsa0VBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWxhcm1BY3Rpb25TdHJhdGVneVByb3BzLFxuICBJQWxhcm1BY3Rpb25TdHJhdGVneSxcbn0gZnJvbSBcIi4vSUFsYXJtQWN0aW9uU3RyYXRlZ3lcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGxlQWN0aW9ucyguLi5hY3Rpb25zOiBJQWxhcm1BY3Rpb25TdHJhdGVneVtdKSB7XG4gIHJldHVybiBuZXcgTXVsdGlwbGVBbGFybUFjdGlvblN0cmF0ZWd5KGFjdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNdWx0aXBsZUFsYXJtQWN0aW9uU3RyYXRlZ3koXG4gIG9iaj86IGFueVxuKTogb2JqIGlzIE11bHRpcGxlQWxhcm1BY3Rpb25TdHJhdGVneSB7XG4gIHJldHVybiAhIShvYmogJiYgb2JqIGluc3RhbmNlb2YgTXVsdGlwbGVBbGFybUFjdGlvblN0cmF0ZWd5KTtcbn1cblxuLyoqXG4gKiBBbGFybSBhY3Rpb24gc3RyYXRlZ3kgdGhhdCBjb21iaW5lcyBtdWx0aXBsZSBhY3Rpb25zIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZXkgd2VyZSBnaXZlbi5cbiAqL1xuZXhwb3J0IGNsYXNzIE11bHRpcGxlQWxhcm1BY3Rpb25TdHJhdGVneSBpbXBsZW1lbnRzIElBbGFybUFjdGlvblN0cmF0ZWd5IHtcbiAgcmVhZG9ubHkgYWN0aW9uczogSUFsYXJtQWN0aW9uU3RyYXRlZ3lbXTtcblxuICBjb25zdHJ1Y3RvcihhY3Rpb25zOiBJQWxhcm1BY3Rpb25TdHJhdGVneVtdKSB7XG4gICAgdGhpcy5hY3Rpb25zID0gYWN0aW9ucztcbiAgfVxuXG4gIGFkZEFsYXJtQWN0aW9ucyhwcm9wczogQWxhcm1BY3Rpb25TdHJhdGVneVByb3BzKTogdm9pZCB7XG4gICAgdGhpcy5hY3Rpb25zLmZvckVhY2goKGFjdGlvbikgPT4gYWN0aW9uLmFkZEFsYXJtQWN0aW9ucyhwcm9wcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbGlzdCBvZiBhbGFybSBhY3Rpb25zIHdoZXJlIGFueSBuZXN0ZWQgaW5zdGFuY2VzIG9mIE11bHRpcGxlQWxhcm1BY3Rpb25TdHJhdGVneVxuICAgKiBhcmUgZmxhdHRlbmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyBmbGF0dGVuZWQgbGlzdCBvZiBhbGFybSBhY3Rpb25zLlxuICAgKi9cbiAgZmxhdHRlbmVkQWxhcm1BY3Rpb25zKCk6IElBbGFybUFjdGlvblN0cmF0ZWd5W10ge1xuICAgIHJldHVybiB0aGlzLl9mbGF0dGVuZWRBbGFybUFjdGlvbnMoLi4udGhpcy5hY3Rpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZsYXR0ZW5lZEFsYXJtQWN0aW9ucyhcbiAgICAuLi5hY3Rpb25zOiBJQWxhcm1BY3Rpb25TdHJhdGVneVtdXG4gICk6IElBbGFybUFjdGlvblN0cmF0ZWd5W10ge1xuICAgIHJldHVybiBhY3Rpb25zLmZsYXRNYXAoKGFjdGlvbikgPT4ge1xuICAgICAgaWYgKGlzTXVsdGlwbGVBbGFybUFjdGlvblN0cmF0ZWd5KGFjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZsYXR0ZW5lZEFsYXJtQWN0aW9ucyhhY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW2FjdGlvbl07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==