"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkLoadBalancerMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
/**
 * Metric factory to create metrics for network load-balanced service.
 */
class NetworkLoadBalancerMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.networkLoadBalancer = props.networkLoadBalancer;
        this.networkTargetGroup = props.networkTargetGroup;
        this.invertStatisticsOfTaskCountEnabled =
            props.invertStatisticsOfTaskCountEnabled ?? false;
    }
    metricHealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.networkTargetGroup.metrics.healthyHostCount({
            label: "Healthy Tasks",
            color: common_1.HealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MAX
                : common_1.MetricStatistic.MIN,
        }));
    }
    metricUnhealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.networkTargetGroup.metrics.unHealthyHostCount({
            label: "Unhealthy Tasks",
            color: common_1.UnhealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MIN
                : common_1.MetricStatistic.MAX,
        }));
    }
    metricHealthyTaskInPercent() {
        const healthyTaskCount = this.metricHealthyTaskCount();
        const unhealthyTaskCount = this.metricUnhealthyTaskCount();
        return this.metricFactory.createMetricMath("(healthyTaskCount / (healthyTaskCount + unhealthyTaskCount)) * 100", { healthyTaskCount, unhealthyTaskCount }, "Healthy Task Percent (avg: ${AVG})");
    }
    metricActiveConnectionCount() {
        return this.metricFactory.adaptMetric(this.networkLoadBalancer.metrics.activeFlowCount({
            label: "Active",
        }));
    }
    metricNewConnectionCount() {
        return this.metricFactory.adaptMetric(this.networkLoadBalancer.metrics.newFlowCount({
            label: "New",
        }));
    }
    metricProcessedBytesMin() {
        return this.metricFactory.adaptMetric(this.networkLoadBalancer.metrics.processedBytes({
            statistic: common_1.MetricStatistic.MIN,
            label: "Processed Bytes (min)",
        }));
    }
}
exports.NetworkLoadBalancerMetricFactory = NetworkLoadBalancerMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
NetworkLoadBalancerMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.NetworkLoadBalancerMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV0d29ya0xvYWRCYWxhbmNlck1ldHJpY0ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJOZXR3b3JrTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQVNBLHlDQUtzQjtBQVd0Qjs7R0FFRztBQUNILE1BQWEsZ0NBQWdDO0lBUTNDLFlBQ0UsYUFBNEIsRUFDNUIsS0FBNEM7UUFFNUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztRQUNyRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDO1FBQ25ELElBQUksQ0FBQyxrQ0FBa0M7WUFDckMsS0FBSyxDQUFDLGtDQUFrQyxJQUFJLEtBQUssQ0FBQztJQUN0RCxDQUFDO0lBRUQsc0JBQXNCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQ25DLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7WUFDL0MsS0FBSyxFQUFFLGVBQWU7WUFDdEIsS0FBSyxFQUFFLDJCQUFrQjtZQUN6QixTQUFTLEVBQUUsSUFBSSxDQUFDLGtDQUFrQztnQkFDaEQsQ0FBQyxDQUFDLHdCQUFlLENBQUMsR0FBRztnQkFDckIsQ0FBQyxDQUFDLHdCQUFlLENBQUMsR0FBRztTQUN4QixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCx3QkFBd0I7UUFDdEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FDbkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztZQUNqRCxLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLEtBQUssRUFBRSw2QkFBb0I7WUFDM0IsU0FBUyxFQUFFLElBQUksQ0FBQyxrQ0FBa0M7Z0JBQ2hELENBQUMsQ0FBQyx3QkFBZSxDQUFDLEdBQUc7Z0JBQ3JCLENBQUMsQ0FBQyx3QkFBZSxDQUFDLEdBQUc7U0FDeEIsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsMEJBQTBCO1FBQ3hCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDdkQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUMzRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQ3hDLG9FQUFvRSxFQUNwRSxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLEVBQ3hDLG9DQUFvQyxDQUNyQyxDQUFDO0lBQ0osQ0FBQztJQUVELDJCQUEyQjtRQUN6QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUNuQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQztZQUMvQyxLQUFLLEVBQUUsUUFBUTtTQUNoQixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCx3QkFBd0I7UUFDdEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FDbkMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDNUMsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FDbkMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7WUFDOUMsU0FBUyxFQUFFLHdCQUFlLENBQUMsR0FBRztZQUM5QixLQUFLLEVBQUUsdUJBQXVCO1NBQy9CLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7QUE1RUgsNEVBNkVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSU5ldHdvcmtMb2FkQmFsYW5jZXIsXG4gIElOZXR3b3JrVGFyZ2V0R3JvdXAsXG59IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWxhc3RpY2xvYWRiYWxhbmNpbmd2MlwiO1xuXG5pbXBvcnQge1xuICBJTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeSxcbiAgQmFzZUxvYWRCYWxhbmNlck1ldHJpY0ZhY3RvcnlQcm9wcyxcbn0gZnJvbSBcIi4vTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeVwiO1xuaW1wb3J0IHtcbiAgSGVhbHRoeU1ldHJpY0NvbG9yLFxuICBNZXRyaWNGYWN0b3J5LFxuICBNZXRyaWNTdGF0aXN0aWMsXG4gIFVuaGVhbHRoeU1ldHJpY0NvbG9yLFxufSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbi8qKlxuICogUHJvcHMgdG8gY3JlYXRlIE5ldHdvcmtMb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5ldHdvcmtMb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5UHJvcHNcbiAgZXh0ZW5kcyBCYXNlTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeVByb3BzIHtcbiAgcmVhZG9ubHkgbmV0d29ya0xvYWRCYWxhbmNlcjogSU5ldHdvcmtMb2FkQmFsYW5jZXI7XG4gIHJlYWRvbmx5IG5ldHdvcmtUYXJnZXRHcm91cDogSU5ldHdvcmtUYXJnZXRHcm91cDtcbn1cblxuLyoqXG4gKiBNZXRyaWMgZmFjdG9yeSB0byBjcmVhdGUgbWV0cmljcyBmb3IgbmV0d29yayBsb2FkLWJhbGFuY2VkIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBOZXR3b3JrTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeVxuICBpbXBsZW1lbnRzIElMb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5XG57XG4gIHByb3RlY3RlZCByZWFkb25seSBtZXRyaWNGYWN0b3J5OiBNZXRyaWNGYWN0b3J5O1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbmV0d29ya0xvYWRCYWxhbmNlcjogSU5ldHdvcmtMb2FkQmFsYW5jZXI7XG4gIHByb3RlY3RlZCByZWFkb25seSBuZXR3b3JrVGFyZ2V0R3JvdXA6IElOZXR3b3JrVGFyZ2V0R3JvdXA7XG4gIHByb3RlY3RlZCByZWFkb25seSBpbnZlcnRTdGF0aXN0aWNzT2ZUYXNrQ291bnRFbmFibGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG1ldHJpY0ZhY3Rvcnk6IE1ldHJpY0ZhY3RvcnksXG4gICAgcHJvcHM6IE5ldHdvcmtMb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5UHJvcHNcbiAgKSB7XG4gICAgdGhpcy5tZXRyaWNGYWN0b3J5ID0gbWV0cmljRmFjdG9yeTtcbiAgICB0aGlzLm5ldHdvcmtMb2FkQmFsYW5jZXIgPSBwcm9wcy5uZXR3b3JrTG9hZEJhbGFuY2VyO1xuICAgIHRoaXMubmV0d29ya1RhcmdldEdyb3VwID0gcHJvcHMubmV0d29ya1RhcmdldEdyb3VwO1xuICAgIHRoaXMuaW52ZXJ0U3RhdGlzdGljc09mVGFza0NvdW50RW5hYmxlZCA9XG4gICAgICBwcm9wcy5pbnZlcnRTdGF0aXN0aWNzT2ZUYXNrQ291bnRFbmFibGVkID8/IGZhbHNlO1xuICB9XG5cbiAgbWV0cmljSGVhbHRoeVRhc2tDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmFkYXB0TWV0cmljKFxuICAgICAgdGhpcy5uZXR3b3JrVGFyZ2V0R3JvdXAubWV0cmljcy5oZWFsdGh5SG9zdENvdW50KHtcbiAgICAgICAgbGFiZWw6IFwiSGVhbHRoeSBUYXNrc1wiLFxuICAgICAgICBjb2xvcjogSGVhbHRoeU1ldHJpY0NvbG9yLFxuICAgICAgICBzdGF0aXN0aWM6IHRoaXMuaW52ZXJ0U3RhdGlzdGljc09mVGFza0NvdW50RW5hYmxlZFxuICAgICAgICAgID8gTWV0cmljU3RhdGlzdGljLk1BWFxuICAgICAgICAgIDogTWV0cmljU3RhdGlzdGljLk1JTixcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY1VuaGVhbHRoeVRhc2tDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmFkYXB0TWV0cmljKFxuICAgICAgdGhpcy5uZXR3b3JrVGFyZ2V0R3JvdXAubWV0cmljcy51bkhlYWx0aHlIb3N0Q291bnQoe1xuICAgICAgICBsYWJlbDogXCJVbmhlYWx0aHkgVGFza3NcIixcbiAgICAgICAgY29sb3I6IFVuaGVhbHRoeU1ldHJpY0NvbG9yLFxuICAgICAgICBzdGF0aXN0aWM6IHRoaXMuaW52ZXJ0U3RhdGlzdGljc09mVGFza0NvdW50RW5hYmxlZFxuICAgICAgICAgID8gTWV0cmljU3RhdGlzdGljLk1JTlxuICAgICAgICAgIDogTWV0cmljU3RhdGlzdGljLk1BWCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY0hlYWx0aHlUYXNrSW5QZXJjZW50KCkge1xuICAgIGNvbnN0IGhlYWx0aHlUYXNrQ291bnQgPSB0aGlzLm1ldHJpY0hlYWx0aHlUYXNrQ291bnQoKTtcbiAgICBjb25zdCB1bmhlYWx0aHlUYXNrQ291bnQgPSB0aGlzLm1ldHJpY1VuaGVhbHRoeVRhc2tDb3VudCgpO1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljTWF0aChcbiAgICAgIFwiKGhlYWx0aHlUYXNrQ291bnQgLyAoaGVhbHRoeVRhc2tDb3VudCArIHVuaGVhbHRoeVRhc2tDb3VudCkpICogMTAwXCIsXG4gICAgICB7IGhlYWx0aHlUYXNrQ291bnQsIHVuaGVhbHRoeVRhc2tDb3VudCB9LFxuICAgICAgXCJIZWFsdGh5IFRhc2sgUGVyY2VudCAoYXZnOiAke0FWR30pXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljQWN0aXZlQ29ubmVjdGlvbkNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuYWRhcHRNZXRyaWMoXG4gICAgICB0aGlzLm5ldHdvcmtMb2FkQmFsYW5jZXIubWV0cmljcy5hY3RpdmVGbG93Q291bnQoe1xuICAgICAgICBsYWJlbDogXCJBY3RpdmVcIixcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY05ld0Nvbm5lY3Rpb25Db3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmFkYXB0TWV0cmljKFxuICAgICAgdGhpcy5uZXR3b3JrTG9hZEJhbGFuY2VyLm1ldHJpY3MubmV3Rmxvd0NvdW50KHtcbiAgICAgICAgbGFiZWw6IFwiTmV3XCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBtZXRyaWNQcm9jZXNzZWRCeXRlc01pbigpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmFkYXB0TWV0cmljKFxuICAgICAgdGhpcy5uZXR3b3JrTG9hZEJhbGFuY2VyLm1ldHJpY3MucHJvY2Vzc2VkQnl0ZXMoe1xuICAgICAgICBzdGF0aXN0aWM6IE1ldHJpY1N0YXRpc3RpYy5NSU4sXG4gICAgICAgIGxhYmVsOiBcIlByb2Nlc3NlZCBCeXRlcyAobWluKVwiLFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=