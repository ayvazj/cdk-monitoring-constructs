"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkLoadBalancerMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const NetworkLoadBalancerMetricFactory_1 = require("./NetworkLoadBalancerMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class NetworkLoadBalancerMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const fallbackConstructName = `${props.networkLoadBalancer}-${props.networkTargetGroup}`;
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName,
        });
        this.humanReadableName = namingStrategy.resolveHumanReadableName();
        this.metricFactory = new NetworkLoadBalancerMetricFactory_1.NetworkLoadBalancerMetricFactory(scope.createMetricFactory(), props);
        this.healthyTaskCountMetric = this.metricFactory.metricHealthyTaskCount();
        this.unhealthyTaskCountMetric =
            this.metricFactory.metricUnhealthyTaskCount();
        this.healthyTaskPercentMetric =
            this.metricFactory.metricHealthyTaskInPercent();
        this.activeTcpFlowCountMetric =
            this.metricFactory.metricActiveConnectionCount();
        this.newTcpFlowCountMetric = this.metricFactory.metricNewConnectionCount();
        this.processedBytesMetric = this.metricFactory.metricProcessedBytesMin();
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.taskHealthAlarmFactory = new common_1.TaskHealthAlarmFactory(alarmFactory);
        this.throughputAlarmFactory = new common_1.ThroughputAlarmFactory(alarmFactory);
        this.taskHealthAnnotations = [];
        this.processedBytesAnnotations = [];
        for (const disambiguator in props.addHealthyTaskCountAlarm) {
            const alarmProps = props.addHealthyTaskCountAlarm[disambiguator];
            const createdAlarm = this.taskHealthAlarmFactory.addHealthyTaskCountAlarm(this.healthyTaskCountMetric, alarmProps, disambiguator);
            this.taskHealthAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addUnhealthyTaskCountAlarm) {
            const alarmProps = props.addUnhealthyTaskCountAlarm[disambiguator];
            const createdAlarm = this.taskHealthAlarmFactory.addUnhealthyTaskCountAlarm(this.unhealthyTaskCountMetric, alarmProps, disambiguator);
            this.taskHealthAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addHealthyTaskPercentAlarm) {
            const alarmProps = props.addHealthyTaskPercentAlarm[disambiguator];
            const createdAlarm = this.taskHealthAlarmFactory.addHealthyTaskPercentAlarm(this.healthyTaskPercentMetric, alarmProps, disambiguator);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinProcessedBytesAlarm) {
            const alarmProps = props.addMinProcessedBytesAlarm[disambiguator];
            const createdAlarm = this.throughputAlarmFactory.addMinProcessedBytesAlarm(this.processedBytesMetric, alarmProps, disambiguator);
            this.processedBytesAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createTcpFlowsWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
            this.createTaskHealthWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createTcpFlowsWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight),
            this.createTaskHealthWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Network Load Balancer",
            title: this.humanReadableName,
        });
    }
    createTaskHealthWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Task Health",
            left: [this.healthyTaskCountMetric, this.unhealthyTaskCountMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.taskHealthAnnotations,
        });
    }
    createTcpFlowsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "TCP Flows",
            left: [this.activeTcpFlowCountMetric, this.newTcpFlowCountMetric],
            leftYAxis: common_1.CountAxisFromZero,
            right: [this.processedBytesMetric],
            rightYAxis: common_1.SizeAxisBytesFromZero,
        });
    }
}
exports.NetworkLoadBalancerMonitoring = NetworkLoadBalancerMonitoring;
_a = JSII_RTTI_SYMBOL_1;
NetworkLoadBalancerMonitoring[_a] = { fqn: "cdk-monitoring-constructs.NetworkLoadBalancerMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,