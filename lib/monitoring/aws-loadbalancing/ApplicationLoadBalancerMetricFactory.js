"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationLoadBalancerMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
/**
 * Metric factory to create metrics for application load-balanced service.
 */
class ApplicationLoadBalancerMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.applicationLoadBalancer = props.applicationLoadBalancer;
        this.applicationTargetGroup = props.applicationTargetGroup;
        this.invertStatisticsOfTaskCountEnabled =
            props.invertStatisticsOfTaskCountEnabled ?? false;
    }
    metricHealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.applicationTargetGroup.metrics.healthyHostCount({
            label: "Healthy Tasks",
            color: common_1.HealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MAX
                : common_1.MetricStatistic.MIN,
        }));
    }
    metricUnhealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.applicationTargetGroup.metrics.unhealthyHostCount({
            label: "Unhealthy Tasks",
            color: common_1.UnhealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MIN
                : common_1.MetricStatistic.MAX,
        }));
    }
    metricHealthyTaskInPercent() {
        const healthyTaskCount = this.metricHealthyTaskCount();
        const unhealthyTaskCount = this.metricUnhealthyTaskCount();
        return this.metricFactory.createMetricMath("(healthyTaskCount / (healthyTaskCount + unhealthyTaskCount)) * 100", { healthyTaskCount, unhealthyTaskCount }, "Healthy Task Percent (avg: ${AVG})");
    }
    metricActiveConnectionCount() {
        return this.metricFactory.adaptMetric(this.applicationLoadBalancer.metrics.activeConnectionCount({
            label: "Active",
        }));
    }
    metricNewConnectionCount() {
        return this.metricFactory.adaptMetric(this.applicationLoadBalancer.metrics.newConnectionCount({
            label: "New",
        }));
    }
    metricProcessedBytesMin() {
        return this.metricFactory.adaptMetric(this.applicationLoadBalancer.metrics.processedBytes({
            statistic: common_1.MetricStatistic.MIN,
            label: "Processed Bytes (min)",
        }));
    }
}
exports.ApplicationLoadBalancerMetricFactory = ApplicationLoadBalancerMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
ApplicationLoadBalancerMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.ApplicationLoadBalancerMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwbGljYXRpb25Mb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQXBwbGljYXRpb25Mb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBU0EseUNBS3NCO0FBV3RCOztHQUVHO0FBQ0gsTUFBYSxvQ0FBb0M7SUFRL0MsWUFDRSxhQUE0QixFQUM1QixLQUFnRDtRQUVoRCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDLHVCQUF1QixDQUFDO1FBQzdELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUMsc0JBQXNCLENBQUM7UUFDM0QsSUFBSSxDQUFDLGtDQUFrQztZQUNyQyxLQUFLLENBQUMsa0NBQWtDLElBQUksS0FBSyxDQUFDO0lBQ3RELENBQUM7SUFFRCxzQkFBc0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FDbkMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNuRCxLQUFLLEVBQUUsZUFBZTtZQUN0QixLQUFLLEVBQUUsMkJBQWtCO1lBQ3pCLFNBQVMsRUFBRSxJQUFJLENBQUMsa0NBQWtDO2dCQUNoRCxDQUFDLENBQUMsd0JBQWUsQ0FBQyxHQUFHO2dCQUNyQixDQUFDLENBQUMsd0JBQWUsQ0FBQyxHQUFHO1NBQ3hCLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELHdCQUF3QjtRQUN0QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUNuQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDO1lBQ3JELEtBQUssRUFBRSxpQkFBaUI7WUFDeEIsS0FBSyxFQUFFLDZCQUFvQjtZQUMzQixTQUFTLEVBQUUsSUFBSSxDQUFDLGtDQUFrQztnQkFDaEQsQ0FBQyxDQUFDLHdCQUFlLENBQUMsR0FBRztnQkFDckIsQ0FBQyxDQUFDLHdCQUFlLENBQUMsR0FBRztTQUN4QixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCwwQkFBMEI7UUFDeEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUN2RCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQzNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FDeEMsb0VBQW9FLEVBQ3BFLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUsRUFDeEMsb0NBQW9DLENBQ3JDLENBQUM7SUFDSixDQUFDO0lBRUQsMkJBQTJCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQ25DLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUM7WUFDekQsS0FBSyxFQUFFLFFBQVE7U0FDaEIsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsd0JBQXdCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQ25DLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7WUFDdEQsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FDbkMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7WUFDbEQsU0FBUyxFQUFFLHdCQUFlLENBQUMsR0FBRztZQUM5QixLQUFLLEVBQUUsdUJBQXVCO1NBQy9CLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7QUE1RUgsb0ZBNkVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSUFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyLFxuICBJQXBwbGljYXRpb25UYXJnZXRHcm91cCxcbn0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZ3YyXCI7XG5cbmltcG9ydCB7XG4gIElMb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5LFxuICBCYXNlTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeVByb3BzLFxufSBmcm9tIFwiLi9Mb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5XCI7XG5pbXBvcnQge1xuICBIZWFsdGh5TWV0cmljQ29sb3IsXG4gIE1ldHJpY0ZhY3RvcnksXG4gIE1ldHJpY1N0YXRpc3RpYyxcbiAgVW5oZWFsdGh5TWV0cmljQ29sb3IsXG59IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuLyoqXG4gKiBQcm9wcyB0byBjcmVhdGUgQXBwbGljYXRpb25Mb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeVByb3BzXG4gIGV4dGVuZHMgQmFzZUxvYWRCYWxhbmNlck1ldHJpY0ZhY3RvcnlQcm9wcyB7XG4gIHJlYWRvbmx5IGFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyOiBJQXBwbGljYXRpb25Mb2FkQmFsYW5jZXI7XG4gIHJlYWRvbmx5IGFwcGxpY2F0aW9uVGFyZ2V0R3JvdXA6IElBcHBsaWNhdGlvblRhcmdldEdyb3VwO1xufVxuXG4vKipcbiAqIE1ldHJpYyBmYWN0b3J5IHRvIGNyZWF0ZSBtZXRyaWNzIGZvciBhcHBsaWNhdGlvbiBsb2FkLWJhbGFuY2VkIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBsaWNhdGlvbkxvYWRCYWxhbmNlck1ldHJpY0ZhY3RvcnlcbiAgaW1wbGVtZW50cyBJTG9hZEJhbGFuY2VyTWV0cmljRmFjdG9yeVxue1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbWV0cmljRmFjdG9yeTogTWV0cmljRmFjdG9yeTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyOiBJQXBwbGljYXRpb25Mb2FkQmFsYW5jZXI7XG4gIHByb3RlY3RlZCByZWFkb25seSBhcHBsaWNhdGlvblRhcmdldEdyb3VwOiBJQXBwbGljYXRpb25UYXJnZXRHcm91cDtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGludmVydFN0YXRpc3RpY3NPZlRhc2tDb3VudEVuYWJsZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbWV0cmljRmFjdG9yeTogTWV0cmljRmFjdG9yeSxcbiAgICBwcm9wczogQXBwbGljYXRpb25Mb2FkQmFsYW5jZXJNZXRyaWNGYWN0b3J5UHJvcHNcbiAgKSB7XG4gICAgdGhpcy5tZXRyaWNGYWN0b3J5ID0gbWV0cmljRmFjdG9yeTtcbiAgICB0aGlzLmFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyID0gcHJvcHMuYXBwbGljYXRpb25Mb2FkQmFsYW5jZXI7XG4gICAgdGhpcy5hcHBsaWNhdGlvblRhcmdldEdyb3VwID0gcHJvcHMuYXBwbGljYXRpb25UYXJnZXRHcm91cDtcbiAgICB0aGlzLmludmVydFN0YXRpc3RpY3NPZlRhc2tDb3VudEVuYWJsZWQgPVxuICAgICAgcHJvcHMuaW52ZXJ0U3RhdGlzdGljc09mVGFza0NvdW50RW5hYmxlZCA/PyBmYWxzZTtcbiAgfVxuXG4gIG1ldHJpY0hlYWx0aHlUYXNrQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5hZGFwdE1ldHJpYyhcbiAgICAgIHRoaXMuYXBwbGljYXRpb25UYXJnZXRHcm91cC5tZXRyaWNzLmhlYWx0aHlIb3N0Q291bnQoe1xuICAgICAgICBsYWJlbDogXCJIZWFsdGh5IFRhc2tzXCIsXG4gICAgICAgIGNvbG9yOiBIZWFsdGh5TWV0cmljQ29sb3IsXG4gICAgICAgIHN0YXRpc3RpYzogdGhpcy5pbnZlcnRTdGF0aXN0aWNzT2ZUYXNrQ291bnRFbmFibGVkXG4gICAgICAgICAgPyBNZXRyaWNTdGF0aXN0aWMuTUFYXG4gICAgICAgICAgOiBNZXRyaWNTdGF0aXN0aWMuTUlOLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgbWV0cmljVW5oZWFsdGh5VGFza0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuYWRhcHRNZXRyaWMoXG4gICAgICB0aGlzLmFwcGxpY2F0aW9uVGFyZ2V0R3JvdXAubWV0cmljcy51bmhlYWx0aHlIb3N0Q291bnQoe1xuICAgICAgICBsYWJlbDogXCJVbmhlYWx0aHkgVGFza3NcIixcbiAgICAgICAgY29sb3I6IFVuaGVhbHRoeU1ldHJpY0NvbG9yLFxuICAgICAgICBzdGF0aXN0aWM6IHRoaXMuaW52ZXJ0U3RhdGlzdGljc09mVGFza0NvdW50RW5hYmxlZFxuICAgICAgICAgID8gTWV0cmljU3RhdGlzdGljLk1JTlxuICAgICAgICAgIDogTWV0cmljU3RhdGlzdGljLk1BWCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY0hlYWx0aHlUYXNrSW5QZXJjZW50KCkge1xuICAgIGNvbnN0IGhlYWx0aHlUYXNrQ291bnQgPSB0aGlzLm1ldHJpY0hlYWx0aHlUYXNrQ291bnQoKTtcbiAgICBjb25zdCB1bmhlYWx0aHlUYXNrQ291bnQgPSB0aGlzLm1ldHJpY1VuaGVhbHRoeVRhc2tDb3VudCgpO1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljTWF0aChcbiAgICAgIFwiKGhlYWx0aHlUYXNrQ291bnQgLyAoaGVhbHRoeVRhc2tDb3VudCArIHVuaGVhbHRoeVRhc2tDb3VudCkpICogMTAwXCIsXG4gICAgICB7IGhlYWx0aHlUYXNrQ291bnQsIHVuaGVhbHRoeVRhc2tDb3VudCB9LFxuICAgICAgXCJIZWFsdGh5IFRhc2sgUGVyY2VudCAoYXZnOiAke0FWR30pXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljQWN0aXZlQ29ubmVjdGlvbkNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuYWRhcHRNZXRyaWMoXG4gICAgICB0aGlzLmFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyLm1ldHJpY3MuYWN0aXZlQ29ubmVjdGlvbkNvdW50KHtcbiAgICAgICAgbGFiZWw6IFwiQWN0aXZlXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBtZXRyaWNOZXdDb25uZWN0aW9uQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5hZGFwdE1ldHJpYyhcbiAgICAgIHRoaXMuYXBwbGljYXRpb25Mb2FkQmFsYW5jZXIubWV0cmljcy5uZXdDb25uZWN0aW9uQ291bnQoe1xuICAgICAgICBsYWJlbDogXCJOZXdcIixcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY1Byb2Nlc3NlZEJ5dGVzTWluKCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuYWRhcHRNZXRyaWMoXG4gICAgICB0aGlzLmFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyLm1ldHJpY3MucHJvY2Vzc2VkQnl0ZXMoe1xuICAgICAgICBzdGF0aXN0aWM6IE1ldHJpY1N0YXRpc3RpYy5NSU4sXG4gICAgICAgIGxhYmVsOiBcIlByb2Nlc3NlZCBCeXRlcyAobWluKVwiLFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=