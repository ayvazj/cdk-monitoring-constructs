"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsCanaryMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const SyntheticsCanaryMetricFactory_1 = require("./SyntheticsCanaryMetricFactory");
const index_1 = require("../../common/index");
const index_2 = require("../../dashboard/index");
/**
 * Monitoring for CloudWatch Synthetics Canaries.
 *
 * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries.html
 */
class SyntheticsCanaryMonitoring extends index_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const namingStrategy = new index_2.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: props.canary.canaryName,
            namedConstruct: props.canary,
        });
        this.humanReadableName = namingStrategy.resolveHumanReadableName();
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.latencyAlarmFactory = new index_1.LatencyAlarmFactory(alarmFactory);
        this.errorAlarmFactory = new index_1.ErrorAlarmFactory(alarmFactory);
        this.latencyAnnotations = [];
        this.errorCountAnnotations = [];
        this.errorRateAnnotations = [];
        const metricFactory = new SyntheticsCanaryMetricFactory_1.SyntheticsCanaryMetricFactory(scope.createMetricFactory(), props);
        this.averageLatencyMetric = metricFactory.metricLatencyAverageInMillis();
        this.errorCountMetric = metricFactory.metric4xxErrorCount();
        this.errorRateMetric = metricFactory.metric4xxErrorRate();
        this.faultCountMetric = metricFactory.metric5xxFaultCount();
        this.faultRateMetric = metricFactory.metric5xxFaultRate();
        for (const disambiguator in props.addAverageLatencyAlarm) {
            const alarmProps = props.addAverageLatencyAlarm[disambiguator];
            const createdAlarm = this.latencyAlarmFactory.addLatencyAlarm(this.averageLatencyMetric, index_1.LatencyType.AVERAGE, alarmProps, disambiguator);
            this.latencyAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.add4xxErrorCountAlarm) {
            const alarmProps = props.add4xxErrorCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.errorCountMetric, index_1.ErrorType.ERROR, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.add4xxErrorRateAlarm) {
            const alarmProps = props.add4xxErrorRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.errorRateMetric, index_1.ErrorType.ERROR, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.add5xxFaultCountAlarm) {
            const alarmProps = props.add5xxFaultCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.faultCountMetric, index_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.add5xxFaultRateAlarm) {
            const alarmProps = props.add5xxFaultRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.faultRateMetric, index_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createErrorCountWidget(index_1.HalfWidth, index_1.DefaultSummaryWidgetHeight),
            this.createErrorRateWidget(index_1.HalfWidth, index_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createLatencyWidget(index_1.ThirdWidth, index_1.DefaultGraphWidgetHeight),
            this.createErrorCountWidget(index_1.ThirdWidth, index_1.DefaultGraphWidgetHeight),
            this.createErrorRateWidget(index_1.ThirdWidth, index_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new index_2.MonitoringHeaderWidget({
            family: "Synthetics Canary",
            title: this.humanReadableName,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency",
            left: [this.averageLatencyMetric],
            leftYAxis: index_1.TimeAxisMillisFromZero,
            leftAnnotations: this.latencyAnnotations,
        });
    }
    createErrorCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors",
            left: [this.errorCountMetric, this.faultCountMetric],
            leftAnnotations: this.errorCountAnnotations,
            leftYAxis: index_1.CountAxisFromZero,
        });
    }
    createErrorRateWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors (rate)",
            left: [this.errorRateMetric, this.faultRateMetric],
            leftYAxis: index_1.RateAxisFromZero,
            leftAnnotations: this.errorRateAnnotations,
        });
    }
}
exports.SyntheticsCanaryMonitoring = SyntheticsCanaryMonitoring;
_a = JSII_RTTI_SYMBOL_1;
SyntheticsCanaryMonitoring[_a] = { fqn: "cdk-monitoring-constructs.SyntheticsCanaryMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,