"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionActivityMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/States";
class StepFunctionActivityMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.rateComputationMethod = common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            ActivityArn: props.activity.activityArn,
        };
    }
    metricActivityRunTimeP99InMillis() {
        return this.metricFactory.createMetric("ActivityRunTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityRunTimeP90InMillis() {
        return this.metricFactory.createMetric("ActivityRunTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityRunTimeP50InMillis() {
        return this.metricFactory.createMetric("ActivityRunTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityScheduleTimeP99InMillis() {
        return this.metricFactory.createMetric("ActivityScheduleTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityScheduleTimeP90InMillis() {
        return this.metricFactory.createMetric("ActivityScheduleTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityScheduleTimeP50InMillis() {
        return this.metricFactory.createMetric("ActivityScheduleTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityTimeP99InMillis() {
        return this.metricFactory.createMetric("ActivityTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityTimeP90InMillis() {
        return this.metricFactory.createMetric("ActivityTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace);
    }
    metricActivityTimeP50InMillis() {
        return this.metricFactory.createMetric("ActivityTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace);
    }
    metricActivitiesFailed() {
        return this.metricFactory.createMetric("ActivitiesFailed", common_1.MetricStatistic.SUM, "Failed", this.dimensionsMap, undefined, Namespace);
    }
    metricActivitiesFailedRate() {
        const metric = this.metricActivitiesFailed();
        return this.metricFactory.toRate(metric, this.rateComputationMethod, false, "faults");
    }
    metricActivitiesHeartbeatTimedOut() {
        return this.metricFactory.createMetric("ActivitiesHeartbeatTimedOut", common_1.MetricStatistic.SUM, "HeartbeatTimedOut", this.dimensionsMap, undefined, Namespace);
    }
    metricActivitiesScheduled() {
        return this.metricFactory.createMetric("ActivitiesScheduled", common_1.MetricStatistic.SUM, "Scheduled", this.dimensionsMap, undefined, Namespace);
    }
    metricActivitiesStarted() {
        return this.metricFactory.createMetric("ActivitiesStarted", common_1.MetricStatistic.SUM, "Started", this.dimensionsMap, undefined, Namespace);
    }
    metricActivitiesSucceeded() {
        return this.metricFactory.createMetric("ActivitiesSucceeded", common_1.MetricStatistic.SUM, "Succeeded", this.dimensionsMap, undefined, Namespace);
    }
    metricActivitiesTimedOut() {
        return this.metricFactory.createMetric("ActivitiesTimedOut", common_1.MetricStatistic.SUM, "Timeout", this.dimensionsMap, undefined, Namespace);
    }
}
exports.StepFunctionActivityMetricFactory = StepFunctionActivityMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
StepFunctionActivityMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.StepFunctionActivityMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,