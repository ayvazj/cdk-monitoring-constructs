"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionServiceIntegrationMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/States";
class StepFunctionServiceIntegrationMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.rateComputationMethod = common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            ServiceIntegrationResourceArn: props.serviceIntegrationResourceArn,
        };
    }
    metricServiceIntegrationRunTimeP99InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationRunTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationRunTimeP90InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationRunTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationRunTimeP50InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationRunTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationScheduleTimeP99InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationScheduleTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationScheduleTimeP90InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationScheduleTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationScheduleTimeP50InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationScheduleTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationTimeP99InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationTimeP90InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationTimeP50InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationsFailed() {
        return this.metricFactory.createMetric("ServiceIntegrationsFailed", common_1.MetricStatistic.SUM, "Failed", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationsFailedRate() {
        const metric = this.metricServiceIntegrationsFailed();
        return this.metricFactory.toRate(metric, this.rateComputationMethod, false, "faults");
    }
    metricServiceIntegrationsScheduled() {
        return this.metricFactory.createMetric("ServiceIntegrationsScheduled", common_1.MetricStatistic.SUM, "Scheduled", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationsStarted() {
        return this.metricFactory.createMetric("ServiceIntegrationsStarted", common_1.MetricStatistic.SUM, "Started", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationsSucceeded() {
        return this.metricFactory.createMetric("ServiceIntegrationsSucceeded", common_1.MetricStatistic.SUM, "Succeeded", this.dimensionsMap, undefined, Namespace);
    }
    metricServiceIntegrationsTimedOut() {
        return this.metricFactory.createMetric("ServiceIntegrationsTimedOut", common_1.MetricStatistic.SUM, "Timeout", this.dimensionsMap, undefined, Namespace);
    }
}
exports.StepFunctionServiceIntegrationMetricFactory = StepFunctionServiceIntegrationMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
StepFunctionServiceIntegrationMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.StepFunctionServiceIntegrationMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,