"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseServiceMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const EcsNamespace = "AWS/ECS";
const EcsContainerInsightsNamespace = "ECS/ContainerInsights";
/**
 * Metric factory for a base service (parent class for e.g. Fargate and EC2 services).
 */
class BaseServiceMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.dimensionsMap = {
            ClusterName: props.service.cluster.clusterName,
            ServiceName: props.service.serviceName,
        };
        this.service = props.service;
    }
    metricClusterCpuUtilisationInPercent() {
        return this.metricFactory.createMetric("CPUUtilization", common_1.MetricStatistic.AVERAGE, "Cluster CPU Utilization", this.dimensionsMap, undefined, EcsNamespace);
    }
    metricClusterMemoryUtilisationInPercent() {
        return this.metricFactory.createMetric("MemoryUtilization", common_1.MetricStatistic.AVERAGE, "Cluster Memory Utilization", this.dimensionsMap, undefined, EcsNamespace);
    }
    metricRunningTaskCount() {
        return this.metricFactory.createMetric("RunningTaskCount", common_1.MetricStatistic.AVERAGE, "Running Tasks", this.dimensionsMap, undefined, EcsContainerInsightsNamespace);
    }
}
exports.BaseServiceMetricFactory = BaseServiceMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
BaseServiceMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.BaseServiceMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZVNlcnZpY2VNZXRyaWNGYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQmFzZVNlcnZpY2VNZXRyaWNGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EseUNBQThEO0FBRTlELE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUMvQixNQUFNLDZCQUE2QixHQUFHLHVCQUF1QixDQUFDO0FBUzlEOztHQUVHO0FBQ0gsTUFBYSx3QkFBd0I7SUFRbkMsWUFDRSxhQUE0QixFQUM1QixLQUFvQztRQUVwQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQzlDLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVc7U0FDdkMsQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUMvQixDQUFDO0lBRUQsb0NBQW9DO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQ3BDLGdCQUFnQixFQUNoQix3QkFBZSxDQUFDLE9BQU8sRUFDdkIseUJBQXlCLEVBQ3pCLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxZQUFZLENBQ2IsQ0FBQztJQUNKLENBQUM7SUFFRCx1Q0FBdUM7UUFDckMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FDcEMsbUJBQW1CLEVBQ25CLHdCQUFlLENBQUMsT0FBTyxFQUN2Qiw0QkFBNEIsRUFDNUIsSUFBSSxDQUFDLGFBQWEsRUFDbEIsU0FBUyxFQUNULFlBQVksQ0FDYixDQUFDO0lBQ0osQ0FBQztJQUVELHNCQUFzQjtRQUNwQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUNwQyxrQkFBa0IsRUFDbEIsd0JBQWUsQ0FBQyxPQUFPLEVBQ3ZCLGVBQWUsRUFDZixJQUFJLENBQUMsYUFBYSxFQUNsQixTQUFTLEVBQ1QsNkJBQTZCLENBQzlCLENBQUM7SUFDSixDQUFDOztBQW5ESCw0REFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaW1lbnNpb25zTWFwIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgeyBJQmFzZVNlcnZpY2UgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVjc1wiO1xuXG5pbXBvcnQgeyBNZXRyaWNGYWN0b3J5LCBNZXRyaWNTdGF0aXN0aWMgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmNvbnN0IEVjc05hbWVzcGFjZSA9IFwiQVdTL0VDU1wiO1xuY29uc3QgRWNzQ29udGFpbmVySW5zaWdodHNOYW1lc3BhY2UgPSBcIkVDUy9Db250YWluZXJJbnNpZ2h0c1wiO1xuXG4vKipcbiAqIFByb3BzIHRvIGNyZWF0ZSBCYXNlU2VydmljZU1ldHJpY0ZhY3RvcnkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZVNlcnZpY2VNZXRyaWNGYWN0b3J5UHJvcHMge1xuICByZWFkb25seSBzZXJ2aWNlOiBJQmFzZVNlcnZpY2U7XG59XG5cbi8qKlxuICogTWV0cmljIGZhY3RvcnkgZm9yIGEgYmFzZSBzZXJ2aWNlIChwYXJlbnQgY2xhc3MgZm9yIGUuZy4gRmFyZ2F0ZSBhbmQgRUMyIHNlcnZpY2VzKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VTZXJ2aWNlTWV0cmljRmFjdG9yeSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBtZXRyaWNGYWN0b3J5OiBNZXRyaWNGYWN0b3J5O1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGltZW5zaW9uc01hcDogRGltZW5zaW9uc01hcDtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgaXNuJ3QgcmVxdWlyZWQgYnkgY2RrLW1vbml0b3JpbmctY29uc3RydWN0cyBhbnltb3JlOyB1c2UgeW91ciBvd24gcmVmZXJlbmNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHNlcnZpY2U6IElCYXNlU2VydmljZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBtZXRyaWNGYWN0b3J5OiBNZXRyaWNGYWN0b3J5LFxuICAgIHByb3BzOiBCYXNlU2VydmljZU1ldHJpY0ZhY3RvcnlQcm9wc1xuICApIHtcbiAgICB0aGlzLm1ldHJpY0ZhY3RvcnkgPSBtZXRyaWNGYWN0b3J5O1xuICAgIHRoaXMuZGltZW5zaW9uc01hcCA9IHtcbiAgICAgIENsdXN0ZXJOYW1lOiBwcm9wcy5zZXJ2aWNlLmNsdXN0ZXIuY2x1c3Rlck5hbWUsXG4gICAgICBTZXJ2aWNlTmFtZTogcHJvcHMuc2VydmljZS5zZXJ2aWNlTmFtZSxcbiAgICB9O1xuICAgIHRoaXMuc2VydmljZSA9IHByb3BzLnNlcnZpY2U7XG4gIH1cblxuICBtZXRyaWNDbHVzdGVyQ3B1VXRpbGlzYXRpb25JblBlcmNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWMoXG4gICAgICBcIkNQVVV0aWxpemF0aW9uXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuQVZFUkFHRSxcbiAgICAgIFwiQ2x1c3RlciBDUFUgVXRpbGl6YXRpb25cIixcbiAgICAgIHRoaXMuZGltZW5zaW9uc01hcCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIEVjc05hbWVzcGFjZVxuICAgICk7XG4gIH1cblxuICBtZXRyaWNDbHVzdGVyTWVtb3J5VXRpbGlzYXRpb25JblBlcmNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWMoXG4gICAgICBcIk1lbW9yeVV0aWxpemF0aW9uXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuQVZFUkFHRSxcbiAgICAgIFwiQ2x1c3RlciBNZW1vcnkgVXRpbGl6YXRpb25cIixcbiAgICAgIHRoaXMuZGltZW5zaW9uc01hcCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIEVjc05hbWVzcGFjZVxuICAgICk7XG4gIH1cblxuICBtZXRyaWNSdW5uaW5nVGFza0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljKFxuICAgICAgXCJSdW5uaW5nVGFza0NvdW50XCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuQVZFUkFHRSxcbiAgICAgIFwiUnVubmluZyBUYXNrc1wiLFxuICAgICAgdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgRWNzQ29udGFpbmVySW5zaWdodHNOYW1lc3BhY2VcbiAgICApO1xuICB9XG59XG4iXX0=