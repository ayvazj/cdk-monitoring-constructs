"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoTableGlobalSecondaryIndexMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const DynamoTableGlobalSecondaryIndexMetricFactory_1 = require("./DynamoTableGlobalSecondaryIndexMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class DynamoTableGlobalSecondaryIndexMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: props.globalSecondaryIndexName,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.tableUrl = scope
            .createAwsConsoleUrlFactory()
            .getDynamoTableUrl(props.table.tableName);
        const metricFactory = new DynamoTableGlobalSecondaryIndexMetricFactory_1.DynamoTableGlobalSecondaryIndexMetricFactory(scope.createMetricFactory(), props);
        this.provisionedReadUnitsMetric =
            metricFactory.metricProvisionedReadCapacityUnits();
        this.provisionedWriteUnitsMetric =
            metricFactory.metricProvisionedWriteCapacityUnits();
        this.consumedReadUnitsMetric =
            metricFactory.metricConsumedReadCapacityUnits();
        this.consumedWriteUnitsMetric =
            metricFactory.metricConsumedWriteCapacityUnits();
        this.indexConsumedWriteUnitsMetric =
            metricFactory.metricIndexConsumedWriteUnitsMetric();
        this.readThrottleCountMetric =
            metricFactory.metricThrottledReadRequestCount();
        this.writeThrottleCountMetric =
            metricFactory.metricThrottledWriteRequestCount();
        this.indexThrottleCountMetric =
            metricFactory.metricThrottledIndexRequestCount();
        const alarmFactory = scope.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.gsiAlarmFactory = new common_1.DynamoAlarmFactory(alarmFactory);
        this.throttledEventsAnnotations = [];
        for (const disambiguator in props.addReadThrottledEventsCountAlarm) {
            const alarmProps = props.addReadThrottledEventsCountAlarm[disambiguator];
            const createdAlarm = this.gsiAlarmFactory.addThrottledEventsAlarm(this.readThrottleCountMetric, common_1.CapacityType.READ, alarmProps, disambiguator);
            this.throttledEventsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addWriteThrottledEventsCountAlarm) {
            const alarmProps = props.addWriteThrottledEventsCountAlarm[disambiguator];
            const createdAlarm = this.gsiAlarmFactory.addThrottledEventsAlarm(this.writeThrottleCountMetric, common_1.CapacityType.WRITE, alarmProps, disambiguator);
            this.throttledEventsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createReadCapacityWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createWriteCapacityWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createThrottlesWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createReadCapacityWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
            this.createWriteCapacityWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
            this.createThrottlesWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Dynamo Table Global Secondary Index",
            title: this.title,
            goToLinkUrl: this.tableUrl,
        });
    }
    createReadCapacityWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Read Capacity",
            left: [this.consumedReadUnitsMetric, this.provisionedReadUnitsMetric],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createWriteCapacityWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Write Capacity",
            left: [
                this.consumedWriteUnitsMetric,
                this.provisionedWriteUnitsMetric,
                this.indexConsumedWriteUnitsMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createThrottlesWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Throttles",
            left: [
                this.readThrottleCountMetric,
                this.writeThrottleCountMetric,
                this.indexThrottleCountMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.throttledEventsAnnotations,
        });
    }
}
exports.DynamoTableGlobalSecondaryIndexMonitoring = DynamoTableGlobalSecondaryIndexMonitoring;
_a = JSII_RTTI_SYMBOL_1;
DynamoTableGlobalSecondaryIndexMonitoring[_a] = { fqn: "cdk-monitoring-constructs.DynamoTableGlobalSecondaryIndexMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,