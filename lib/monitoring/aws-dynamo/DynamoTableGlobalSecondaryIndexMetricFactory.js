"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoTableGlobalSecondaryIndexMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const DynamoDbNamespace = "AWS/DynamoDB";
class DynamoTableGlobalSecondaryIndexMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.table = props.table;
        this.dimensionsMap = {
            TableName: props.table.tableName,
            GlobalSecondaryIndexName: props.globalSecondaryIndexName,
        };
    }
    metricProvisionedReadCapacityUnits() {
        return this.metricFactory.createMetric("ProvisionedReadCapacityUnits", common_1.MetricStatistic.SUM, "Provisioned", this.dimensionsMap, undefined, DynamoDbNamespace);
    }
    metricProvisionedWriteCapacityUnits() {
        return this.metricFactory.createMetric("ProvisionedWriteCapacityUnits", common_1.MetricStatistic.SUM, "Provisioned", this.dimensionsMap, undefined, DynamoDbNamespace);
    }
    metricConsumedReadCapacityUnits() {
        return this.metricFactory.createMetricMath("consumed_rcu_sum/PERIOD(consumed_rcu_sum)", {
            consumed_rcu_sum: this.table.metricConsumedReadCapacityUnits({
                statistic: common_1.MetricStatistic.SUM,
                dimensionsMap: this.dimensionsMap,
            }),
        }, "Consumed");
    }
    metricConsumedWriteCapacityUnits() {
        return this.metricFactory.createMetricMath("consumed_wcu_sum/PERIOD(consumed_wcu_sum)", {
            consumed_wcu_sum: this.table.metricConsumedWriteCapacityUnits({
                statistic: common_1.MetricStatistic.SUM,
                dimensionsMap: this.dimensionsMap,
            }),
        }, "Consumed");
    }
    metricIndexConsumedWriteUnitsMetric() {
        return this.metricFactory.createMetric("OnlineIndexConsumedWriteCapacity", common_1.MetricStatistic.SUM, "Consumed by index", this.dimensionsMap, undefined, DynamoDbNamespace);
    }
    metricThrottledReadRequestCount() {
        const readThrottles = this.metricFactory.createMetric("ReadThrottleEvents", common_1.MetricStatistic.SUM, undefined, this.dimensionsMap, undefined, DynamoDbNamespace);
        return this.metricFactory.createMetricMath("FILL(readThrottles,0)", { readThrottles }, "Read");
    }
    metricThrottledWriteRequestCount() {
        const writeThrottles = this.metricFactory.createMetric("WriteThrottleEvents", common_1.MetricStatistic.SUM, undefined, this.dimensionsMap, undefined, DynamoDbNamespace);
        return this.metricFactory.createMetricMath("FILL(writeThrottles,0)", { writeThrottles }, "Write");
    }
    metricThrottledIndexRequestCount() {
        const indexThrottles = this.metricFactory.createMetric("OnlineIndexThrottleEvents", common_1.MetricStatistic.SUM, undefined, this.dimensionsMap, undefined, DynamoDbNamespace);
        return this.metricFactory.createMetricMath("FILL(indexThrottles,0)", { indexThrottles }, "Index");
    }
}
exports.DynamoTableGlobalSecondaryIndexMetricFactory = DynamoTableGlobalSecondaryIndexMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
DynamoTableGlobalSecondaryIndexMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.DynamoTableGlobalSecondaryIndexMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHluYW1vVGFibGVHbG9iYWxTZWNvbmRhcnlJbmRleE1ldHJpY0ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEeW5hbW9UYWJsZUdsb2JhbFNlY29uZGFyeUluZGV4TWV0cmljRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLHlDQUE4RDtBQUU5RCxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQztBQU96QyxNQUFhLDRDQUE0QztJQUt2RCxZQUNFLGFBQTRCLEVBQzVCLEtBQXdEO1FBRXhELElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLFNBQVMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVM7WUFDaEMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLHdCQUF3QjtTQUN6RCxDQUFDO0lBQ0osQ0FBQztJQUVELGtDQUFrQztRQUNoQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUNwQyw4QkFBOEIsRUFDOUIsd0JBQWUsQ0FBQyxHQUFHLEVBQ25CLGFBQWEsRUFDYixJQUFJLENBQUMsYUFBYSxFQUNsQixTQUFTLEVBQ1QsaUJBQWlCLENBQ2xCLENBQUM7SUFDSixDQUFDO0lBRUQsbUNBQW1DO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQ3BDLCtCQUErQixFQUMvQix3QkFBZSxDQUFDLEdBQUcsRUFDbkIsYUFBYSxFQUNiLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxpQkFBaUIsQ0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFRCwrQkFBK0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUN4QywyQ0FBMkMsRUFDM0M7WUFDRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDO2dCQUMzRCxTQUFTLEVBQUUsd0JBQWUsQ0FBQyxHQUFHO2dCQUM5QixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7YUFDbEMsQ0FBQztTQUNILEVBQ0QsVUFBVSxDQUNYLENBQUM7SUFDSixDQUFDO0lBRUQsZ0NBQWdDO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FDeEMsMkNBQTJDLEVBQzNDO1lBQ0UsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQztnQkFDNUQsU0FBUyxFQUFFLHdCQUFlLENBQUMsR0FBRztnQkFDOUIsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO2FBQ2xDLENBQUM7U0FDSCxFQUNELFVBQVUsQ0FDWCxDQUFDO0lBQ0osQ0FBQztJQUVELG1DQUFtQztRQUNqQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUNwQyxrQ0FBa0MsRUFDbEMsd0JBQWUsQ0FBQyxHQUFHLEVBQ25CLG1CQUFtQixFQUNuQixJQUFJLENBQUMsYUFBYSxFQUNsQixTQUFTLEVBQ1QsaUJBQWlCLENBQ2xCLENBQUM7SUFDSixDQUFDO0lBRUQsK0JBQStCO1FBQzdCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUNuRCxvQkFBb0IsRUFDcEIsd0JBQWUsQ0FBQyxHQUFHLEVBQ25CLFNBQVMsRUFDVCxJQUFJLENBQUMsYUFBYSxFQUNsQixTQUFTLEVBQ1QsaUJBQWlCLENBQ2xCLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQ3hDLHVCQUF1QixFQUN2QixFQUFFLGFBQWEsRUFBRSxFQUNqQixNQUFNLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCxnQ0FBZ0M7UUFDOUIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQ3BELHFCQUFxQixFQUNyQix3QkFBZSxDQUFDLEdBQUcsRUFDbkIsU0FBUyxFQUNULElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxpQkFBaUIsQ0FDbEIsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FDeEMsd0JBQXdCLEVBQ3hCLEVBQUUsY0FBYyxFQUFFLEVBQ2xCLE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGdDQUFnQztRQUM5QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FDcEQsMkJBQTJCLEVBQzNCLHdCQUFlLENBQUMsR0FBRyxFQUNuQixTQUFTLEVBQ1QsSUFBSSxDQUFDLGFBQWEsRUFDbEIsU0FBUyxFQUNULGlCQUFpQixDQUNsQixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUN4Qyx3QkFBd0IsRUFDeEIsRUFBRSxjQUFjLEVBQUUsRUFDbEIsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDOztBQTdISCxvR0E4SEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaW1lbnNpb25zTWFwIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgeyBJVGFibGUgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiXCI7XG5cbmltcG9ydCB7IE1ldHJpY0ZhY3RvcnksIE1ldHJpY1N0YXRpc3RpYyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuY29uc3QgRHluYW1vRGJOYW1lc3BhY2UgPSBcIkFXUy9EeW5hbW9EQlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtb1RhYmxlR2xvYmFsU2Vjb25kYXJ5SW5kZXhNZXRyaWNGYWN0b3J5UHJvcHMge1xuICByZWFkb25seSB0YWJsZTogSVRhYmxlO1xuICByZWFkb25seSBnbG9iYWxTZWNvbmRhcnlJbmRleE5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIER5bmFtb1RhYmxlR2xvYmFsU2Vjb25kYXJ5SW5kZXhNZXRyaWNGYWN0b3J5IHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG1ldHJpY0ZhY3Rvcnk6IE1ldHJpY0ZhY3Rvcnk7XG4gIHByb3RlY3RlZCByZWFkb25seSB0YWJsZTogSVRhYmxlO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGltZW5zaW9uc01hcDogRGltZW5zaW9uc01hcDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBtZXRyaWNGYWN0b3J5OiBNZXRyaWNGYWN0b3J5LFxuICAgIHByb3BzOiBEeW5hbW9UYWJsZUdsb2JhbFNlY29uZGFyeUluZGV4TWV0cmljRmFjdG9yeVByb3BzXG4gICkge1xuICAgIHRoaXMubWV0cmljRmFjdG9yeSA9IG1ldHJpY0ZhY3Rvcnk7XG4gICAgdGhpcy50YWJsZSA9IHByb3BzLnRhYmxlO1xuICAgIHRoaXMuZGltZW5zaW9uc01hcCA9IHtcbiAgICAgIFRhYmxlTmFtZTogcHJvcHMudGFibGUudGFibGVOYW1lLFxuICAgICAgR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lOiBwcm9wcy5nbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUsXG4gICAgfTtcbiAgfVxuXG4gIG1ldHJpY1Byb3Zpc2lvbmVkUmVhZENhcGFjaXR5VW5pdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWMoXG4gICAgICBcIlByb3Zpc2lvbmVkUmVhZENhcGFjaXR5VW5pdHNcIixcbiAgICAgIE1ldHJpY1N0YXRpc3RpYy5TVU0sXG4gICAgICBcIlByb3Zpc2lvbmVkXCIsXG4gICAgICB0aGlzLmRpbWVuc2lvbnNNYXAsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBEeW5hbW9EYk5hbWVzcGFjZVxuICAgICk7XG4gIH1cblxuICBtZXRyaWNQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlVbml0cygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmNyZWF0ZU1ldHJpYyhcbiAgICAgIFwiUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5VW5pdHNcIixcbiAgICAgIE1ldHJpY1N0YXRpc3RpYy5TVU0sXG4gICAgICBcIlByb3Zpc2lvbmVkXCIsXG4gICAgICB0aGlzLmRpbWVuc2lvbnNNYXAsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBEeW5hbW9EYk5hbWVzcGFjZVxuICAgICk7XG4gIH1cblxuICBtZXRyaWNDb25zdW1lZFJlYWRDYXBhY2l0eVVuaXRzKCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljTWF0aChcbiAgICAgIFwiY29uc3VtZWRfcmN1X3N1bS9QRVJJT0QoY29uc3VtZWRfcmN1X3N1bSlcIixcbiAgICAgIHtcbiAgICAgICAgY29uc3VtZWRfcmN1X3N1bTogdGhpcy50YWJsZS5tZXRyaWNDb25zdW1lZFJlYWRDYXBhY2l0eVVuaXRzKHtcbiAgICAgICAgICBzdGF0aXN0aWM6IE1ldHJpY1N0YXRpc3RpYy5TVU0sXG4gICAgICAgICAgZGltZW5zaW9uc01hcDogdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgICBcIkNvbnN1bWVkXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljQ29uc3VtZWRXcml0ZUNhcGFjaXR5VW5pdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWNNYXRoKFxuICAgICAgXCJjb25zdW1lZF93Y3Vfc3VtL1BFUklPRChjb25zdW1lZF93Y3Vfc3VtKVwiLFxuICAgICAge1xuICAgICAgICBjb25zdW1lZF93Y3Vfc3VtOiB0aGlzLnRhYmxlLm1ldHJpY0NvbnN1bWVkV3JpdGVDYXBhY2l0eVVuaXRzKHtcbiAgICAgICAgICBzdGF0aXN0aWM6IE1ldHJpY1N0YXRpc3RpYy5TVU0sXG4gICAgICAgICAgZGltZW5zaW9uc01hcDogdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgICBcIkNvbnN1bWVkXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljSW5kZXhDb25zdW1lZFdyaXRlVW5pdHNNZXRyaWMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWMoXG4gICAgICBcIk9ubGluZUluZGV4Q29uc3VtZWRXcml0ZUNhcGFjaXR5XCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuU1VNLFxuICAgICAgXCJDb25zdW1lZCBieSBpbmRleFwiLFxuICAgICAgdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgRHluYW1vRGJOYW1lc3BhY2VcbiAgICApO1xuICB9XG5cbiAgbWV0cmljVGhyb3R0bGVkUmVhZFJlcXVlc3RDb3VudCgpIHtcbiAgICBjb25zdCByZWFkVGhyb3R0bGVzID0gdGhpcy5tZXRyaWNGYWN0b3J5LmNyZWF0ZU1ldHJpYyhcbiAgICAgIFwiUmVhZFRocm90dGxlRXZlbnRzXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuU1VNLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgRHluYW1vRGJOYW1lc3BhY2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWNNYXRoKFxuICAgICAgXCJGSUxMKHJlYWRUaHJvdHRsZXMsMClcIixcbiAgICAgIHsgcmVhZFRocm90dGxlcyB9LFxuICAgICAgXCJSZWFkXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljVGhyb3R0bGVkV3JpdGVSZXF1ZXN0Q291bnQoKSB7XG4gICAgY29uc3Qgd3JpdGVUaHJvdHRsZXMgPSB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljKFxuICAgICAgXCJXcml0ZVRocm90dGxlRXZlbnRzXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuU1VNLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgRHluYW1vRGJOYW1lc3BhY2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWNNYXRoKFxuICAgICAgXCJGSUxMKHdyaXRlVGhyb3R0bGVzLDApXCIsXG4gICAgICB7IHdyaXRlVGhyb3R0bGVzIH0sXG4gICAgICBcIldyaXRlXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljVGhyb3R0bGVkSW5kZXhSZXF1ZXN0Q291bnQoKSB7XG4gICAgY29uc3QgaW5kZXhUaHJvdHRsZXMgPSB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljKFxuICAgICAgXCJPbmxpbmVJbmRleFRocm90dGxlRXZlbnRzXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuU1VNLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgRHluYW1vRGJOYW1lc3BhY2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWNNYXRoKFxuICAgICAgXCJGSUxMKGluZGV4VGhyb3R0bGVzLDApXCIsXG4gICAgICB7IGluZGV4VGhyb3R0bGVzIH0sXG4gICAgICBcIkluZGV4XCJcbiAgICApO1xuICB9XG59XG4iXX0=