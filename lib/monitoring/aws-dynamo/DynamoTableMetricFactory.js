"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoTableMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const common_1 = require("../../common");
const DynamoDbNamespace = "AWS/DynamoDB";
const ProvisionedReadCapacityUnitsMetric = "ProvisionedReadCapacityUnits";
const ProvisionedWriteCapacityUnitsMetric = "ProvisionedWriteCapacityUnits";
const ProvisionedLabel = "Provisioned";
const ConsumedLabel = "Consumed";
const ReadThrottleEventsLabel = "Read";
const WriteThrottleEventsLabel = "Write";
const SystemErrorsLabel = "System Errors";
class DynamoTableMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.table = props.table;
    }
    metricProvisionedReadCapacityUnits() {
        return this.metricFactory.adaptMetric(this.table.metric(ProvisionedReadCapacityUnitsMetric, {
            label: ProvisionedLabel,
            statistic: common_1.MetricStatistic.AVERAGE,
        }));
    }
    metricProvisionedWriteCapacityUnits() {
        return this.metricFactory.adaptMetric(this.table.metric(ProvisionedWriteCapacityUnitsMetric, {
            label: ProvisionedLabel,
            statistic: common_1.MetricStatistic.AVERAGE,
        }));
    }
    metricConsumedReadCapacityUnits() {
        return this.metricFactory.createMetricMath("consumed_rcu_sum/PERIOD(consumed_rcu_sum)", {
            consumed_rcu_sum: this.table.metricConsumedReadCapacityUnits({
                statistic: common_1.MetricStatistic.SUM,
            }),
        }, ConsumedLabel);
    }
    metricConsumedWriteCapacityUnits() {
        return this.metricFactory.createMetricMath("consumed_wcu_sum/PERIOD(consumed_wcu_sum)", {
            consumed_wcu_sum: this.table.metricConsumedWriteCapacityUnits({
                statistic: common_1.MetricStatistic.SUM,
            }),
        }, ConsumedLabel);
    }
    metricReadCapacityUtilizationPercentage() {
        return this.metricFactory.createMetricMath("100*(consumed_read_cap/provisioned_read_cap)", {
            consumed_read_cap: this.metricConsumedReadCapacityUnits(),
            provisioned_read_cap: this.metricProvisionedReadCapacityUnits(),
        }, "Utilization");
    }
    metricWriteCapacityUtilizationPercentage() {
        return this.metricFactory.createMetricMath("100*(consumed_write_cap/provisioned_write_cap)", {
            consumed_write_cap: this.metricConsumedWriteCapacityUnits(),
            provisioned_write_cap: this.metricProvisionedWriteCapacityUnits(),
        }, "Utilization");
    }
    metricSearchAverageSuccessfulRequestLatencyInMillis() {
        // searches for all used operations
        return this.metricFactory.createMetricSearch('MetricName="SuccessfulRequestLatency"', {
            TableName: this.table.tableName,
            Operation: undefined,
        }, common_1.MetricStatistic.AVERAGE, DynamoDbNamespace);
    }
    metricAverageSuccessfulRequestLatencyInMillis(operation) {
        return this.metricFactory.adaptMetric(this.table.metric("SuccessfulRequestLatency", {
            statistic: common_1.MetricStatistic.AVERAGE,
            label: operation,
            dimensionsMap: {
                TableName: this.table.tableName,
                Operation: operation,
            },
        }));
    }
    metricThrottledReadRequestCount() {
        const readThrottles = this.metricFactory.adaptMetric(this.table.metric("ReadThrottleEvents", {
            statistic: common_1.MetricStatistic.SUM,
            label: ReadThrottleEventsLabel,
        }));
        return this.metricFactory.createMetricMath("FILL(readThrottles,0)", { readThrottles }, ReadThrottleEventsLabel);
    }
    metricThrottledWriteRequestCount() {
        const writeThrottles = this.metricFactory.adaptMetric(this.table.metric("WriteThrottleEvents", {
            statistic: common_1.MetricStatistic.SUM,
            label: WriteThrottleEventsLabel,
        }));
        return this.metricFactory.createMetricMath("FILL(writeThrottles,0)", { writeThrottles }, WriteThrottleEventsLabel);
    }
    /**
     * This represents the number of requests that resulted in a 500 (server error) error code.
     * It summarizes across the basic CRUD operations:
     * GetItem, BatchGetItem, Scan, Query, GetRecords, PutItem, DeleteItem, UpdateItem, BatchWriteItem
     *
     * Itâ€™s usually equal to zero.
     */
    metricSystemErrorsCount() {
        const crudOperations = [
            aws_dynamodb_1.Operation.GET_ITEM,
            aws_dynamodb_1.Operation.BATCH_GET_ITEM,
            aws_dynamodb_1.Operation.SCAN,
            aws_dynamodb_1.Operation.QUERY,
            aws_dynamodb_1.Operation.GET_RECORDS,
            aws_dynamodb_1.Operation.PUT_ITEM,
            aws_dynamodb_1.Operation.DELETE_ITEM,
            aws_dynamodb_1.Operation.UPDATE_ITEM,
            aws_dynamodb_1.Operation.BATCH_WRITE_ITEM,
        ];
        const usingMetrics = {};
        crudOperations.forEach((operation) => {
            const metric = this.table.metric("SystemErrors", {
                dimensionsMap: {
                    TableName: this.table.tableName,
                    Operation: operation,
                },
                statistic: common_1.MetricStatistic.SUM,
            });
            const metricId = "systemError" + operation;
            usingMetrics[metricId] = this.metricFactory.adaptMetric(metric);
        });
        return this.metricFactory.createMetricMath(
        // the metric is not emitted until error happens
        Object.keys(usingMetrics).join("+"), usingMetrics, SystemErrorsLabel);
    }
}
exports.DynamoTableMetricFactory = DynamoTableMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
DynamoTableMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.DynamoTableMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,