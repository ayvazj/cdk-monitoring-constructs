"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaFunctionMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
class LambdaFunctionMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.lambdaFunction = props.lambdaFunction;
        this.fillTpsWithZeroes = props.fillTpsWithZeroes ?? true;
        this.rateComputationMethod =
            props.rateComputationMethod ?? common_1.RateComputationMethod.AVERAGE;
    }
    /**
     * @deprecated Use {@link metricInvocationRate} instead.
     */
    metricTps() {
        return this.metricFactory.toRate(this.metricInvocationCount(), common_1.RateComputationMethod.PER_SECOND, false, "requests", this.fillTpsWithZeroes);
    }
    metricInvocationRate() {
        return this.metricFactory.toRate(this.metricInvocationCount(), this.rateComputationMethod, false, "requests", this.fillTpsWithZeroes);
    }
    metricInvocationCount() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricInvocations({
            label: "Invocations",
        }));
    }
    metricThrottlesCount() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricThrottles({
            label: "Throttles",
        }));
    }
    metricThrottlesRate() {
        const metric = this.metricThrottlesCount();
        return this.metricFactory.toRate(metric, this.rateComputationMethod, false, "throttles");
    }
    metricFaultCount() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricErrors({
            label: "Faults",
        }));
    }
    metricFaultRate() {
        const metric = this.metricFaultCount();
        return this.metricFactory.toRate(metric, this.rateComputationMethod, false, "faults");
    }
    metricLatencyInMillis(latencyType) {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricDuration({
            statistic: common_1.getLatencyTypeStatistic(latencyType),
            label: common_1.getLatencyTypeLabel(latencyType),
        }));
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP99InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P99);
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP90InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P90);
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP50InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P50);
    }
    metricConcurrentExecutions() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metric("ConcurrentExecutions", {
            statistic: common_1.MetricStatistic.MAX,
            label: "Concurrent",
        }));
    }
    metricProvisionedConcurrencySpilloverInvocations() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metric("ProvisionedConcurrencySpilloverInvocations", {
            statistic: common_1.MetricStatistic.SUM,
            label: "Provisioned Concurrency Spillovers",
        }));
    }
    metricProvisionedConcurrencySpilloverRate() {
        const metric = this.metricProvisionedConcurrencySpilloverInvocations();
        return this.metricFactory.toRate(metric, this.rateComputationMethod, false, "pcsi");
    }
    metricMaxIteratorAgeInMillis() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metric("IteratorAge", {
            statistic: common_1.MetricStatistic.MAX,
            label: "Iterator Age",
        }));
    }
}
exports.LambdaFunctionMetricFactory = LambdaFunctionMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
LambdaFunctionMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.LambdaFunctionMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,