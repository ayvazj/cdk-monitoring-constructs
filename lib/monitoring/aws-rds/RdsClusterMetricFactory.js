"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsClusterMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const RdsNamespace = "AWS/RDS";
class RdsClusterMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.cluster = props.cluster;
        this.clusterIdentifier =
            RdsClusterMetricFactory.resolveDbClusterIdentifier(props);
        this.dimensionsMap = { DBClusterIdentifier: this.clusterIdentifier };
    }
    static resolveDbClusterIdentifier(props) {
        if (props.clusterIdentifier !== undefined && props.cluster === undefined) {
            return props.clusterIdentifier;
        }
        else if (props.clusterIdentifier === undefined &&
            props.cluster !== undefined) {
            return props.cluster.clusterIdentifier;
        }
        else if (props.cluster !== undefined && props.cluster !== undefined) {
            throw Error("Only one of `clusterIdentifier` and `cluster` is supported");
        }
        else {
            throw Error("At least one of `clusterIdentifier` or `cluster` is required");
        }
    }
    isServerlessCluster(obj) {
        return obj.clusterArn !== undefined;
    }
    metricTotalConnectionCount() {
        return this.metric("DatabaseConnections", common_1.MetricStatistic.AVERAGE, "Connections");
    }
    metricFreeStorageInBytes() {
        return this.metric("FreeLocalStorage", common_1.MetricStatistic.MIN, "Free");
    }
    metricUsedStorageInBytes() {
        return this.metric("VolumeBytesUsed", common_1.MetricStatistic.MAX, "Used");
    }
    metricDiskSpaceUsageInPercent() {
        const used = this.metricUsedStorageInBytes();
        const free = this.metricFreeStorageInBytes();
        return this.metricFactory.createMetricMath("100 * (used/(used+free))", { used, free }, "Disk Usage");
    }
    metricAverageCpuUsageInPercent() {
        return this.metric("CPUUtilization", common_1.MetricStatistic.AVERAGE, "CPU Usage");
    }
    metricSelectLatencyP90InMillis() {
        return this.metric("SelectLatency", common_1.MetricStatistic.P90, "Select");
    }
    metricInsertLatencyP90InMillis() {
        return this.metric("InsertLatency", common_1.MetricStatistic.P90, "Insert");
    }
    metricUpdateLatencyP90InMillis() {
        return this.metric("UpdateLatency", common_1.MetricStatistic.P90, "Update");
    }
    metricDeleteLatencyP90InMillis() {
        return this.metric("DeleteLatency", common_1.MetricStatistic.P90, "Delete");
    }
    metricCommitLatencyP90InMillis() {
        return this.metric("CommitLatency", common_1.MetricStatistic.P90, "Commit");
    }
    metricServerlessDatabaseCapacity() {
        if (!this.isServerlessCluster(this.cluster)) {
            throw Error("Cluster is not of type `ServerlessCluster`. Metric is not applicable");
        }
        return this.metric("ServerlessDatabaseCapacity", common_1.MetricStatistic.AVERAGE, "Serverless Database Capacity");
    }
    metric(metricName, statistic, label) {
        return this.metricFactory.createMetric(metricName, statistic, label, this.dimensionsMap, undefined, RdsNamespace);
    }
}
exports.RdsClusterMetricFactory = RdsClusterMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
RdsClusterMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.RdsClusterMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,