"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuroraClusterMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const RdsClusterMetricFactory_1 = require("./RdsClusterMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class AuroraClusterMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        if (!this.isServerlessCluster(props.cluster)) {
            throw Error("Cluster is not of type `ServerlessCluster`. Monitoring is not applicable.");
        }
        const metricFactory = new RdsClusterMetricFactory_1.RdsClusterMetricFactory(scope.createMetricFactory(), props);
        this.connectionsMetric = metricFactory.metricTotalConnectionCount();
        this.serverlessDatabaseCapacityMetric =
            metricFactory.metricServerlessDatabaseCapacity();
        this.cpuUsageMetric = metricFactory.metricAverageCpuUsageInPercent();
        this.selectLatencyMetric = metricFactory.metricSelectLatencyP90InMillis();
        this.insertLatencyMetric = metricFactory.metricInsertLatencyP90InMillis();
        this.updateLatencyMetric = metricFactory.metricUpdateLatencyP90InMillis();
        this.deleteLatencyMetric = metricFactory.metricDeleteLatencyP90InMillis();
        this.commitLatencyMetric = metricFactory.metricCommitLatencyP90InMillis();
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: metricFactory.clusterIdentifier,
            namedConstruct: props.cluster,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.url = scope
            .createAwsConsoleUrlFactory()
            .getRdsClusterUrl(metricFactory.clusterIdentifier);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(alarmFactory);
        this.connectionAlarmFactory = new common_1.ConnectionAlarmFactory(alarmFactory);
        this.usageAnnotations = [];
        this.connectionAnnotations = [];
        this.serverlessCapacityAnnotations = [];
        for (const disambiguator in props.addCpuUsageAlarm) {
            const alarmProps = props.addCpuUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCpuUsagePercentAlarm(this.cpuUsageMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinConnectionCountAlarm) {
            const alarmProps = props.addMinConnectionCountAlarm[disambiguator];
            const createdAlarm = this.connectionAlarmFactory.addMinConnectionCountAlarm(this.connectionsMetric, alarmProps, disambiguator);
            this.connectionAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxConnectionCountAlarm) {
            const alarmProps = props.addMaxConnectionCountAlarm[disambiguator];
            const createdAlarm = this.connectionAlarmFactory.addMaxConnectionCountAlarm(this.connectionsMetric, alarmProps, disambiguator);
            this.connectionAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxServerlessDatabaseCapacityAlarm) {
            const alarmProps = props.addMaxServerlessDatabaseCapacityAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxUsageCountAlarm(this.serverlessDatabaseCapacityMetric, alarmProps, disambiguator);
            this.serverlessCapacityAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    isServerlessCluster(obj) {
        return obj.clusterArn !== undefined;
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createCpuUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createConnectionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLatencyWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createServerlessDatabaseCapacityWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createCpuUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createConnectionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLatencyWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight),
            this.createServerlessDatabaseCapacityWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Aurora Cluster",
            title: this.title,
            goToLinkUrl: this.url,
        });
    }
    createCpuUsageWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU Usage",
            left: [this.cpuUsageMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.usageAnnotations,
        });
    }
    createConnectionsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Connections",
            left: [this.connectionsMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.connectionAnnotations,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Query Duration",
            left: [
                this.selectLatencyMetric,
                this.insertLatencyMetric,
                this.updateLatencyMetric,
                this.deleteLatencyMetric,
                this.commitLatencyMetric,
            ],
            leftYAxis: common_1.TimeAxisMillisFromZero,
        });
    }
    createServerlessDatabaseCapacityWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Serverless Database Capacity",
            left: [this.serverlessDatabaseCapacityMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.serverlessCapacityAnnotations,
        });
    }
}
exports.AuroraClusterMonitoring = AuroraClusterMonitoring;
_a = JSII_RTTI_SYMBOL_1;
AuroraClusterMonitoring[_a] = { fqn: "cdk-monitoring-constructs.AuroraClusterMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,