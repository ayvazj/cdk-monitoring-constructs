"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsInstanceMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const RdsNamespace = "AWS/RDS";
class RdsInstanceMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.instance = props.instance;
        this.instanceIdentifier =
            RdsInstanceMetricFactory.resolveDbInstanceIdentifier(props);
        this.dimensionsMap = { DBInstanceIdentifier: this.instanceIdentifier };
    }
    static resolveDbInstanceIdentifier(props) {
        if (!props.instance) {
            throw Error("`instance` is required");
        }
        return props.instance.instanceIdentifier;
    }
    metricTotalConnectionCount() {
        return this.metric("DatabaseConnections", common_1.MetricStatistic.SUM, "Connections: Sum");
    }
    metricAverageCpuUsageInPercent() {
        return this.metric("CPUUtilization", common_1.MetricStatistic.AVERAGE, "CPU Usage");
    }
    metricAverageFreeStorageSpace() {
        return this.metric("FreeStorageSpace", common_1.MetricStatistic.AVERAGE, "FreeStorageSpace: Average");
    }
    metricAverageFreeableMemory() {
        return this.metric("FreeableMemory", common_1.MetricStatistic.AVERAGE, "FreeableMemory: Average");
    }
    metricReadLatencyInMillis(latencyType) {
        const label = "ReadLatency " + common_1.getLatencyTypeLabel(latencyType);
        return this.metric("ReadLatency", common_1.getLatencyTypeStatistic(latencyType), label);
    }
    metricReadThroughput() {
        return this.metric("ReadThroughput", common_1.MetricStatistic.AVERAGE, "ReadThroughput: Average");
    }
    metricReadIops() {
        return this.metric("ReadIOPS", common_1.MetricStatistic.AVERAGE, "ReadIOPS: Average");
    }
    metricWriteLatencyInMillis(latencyType) {
        const label = "WriteLatency " + common_1.getLatencyTypeLabel(latencyType);
        return this.metric("WriteLatency", common_1.getLatencyTypeStatistic(latencyType), label);
    }
    metricWriteThroughput() {
        return this.metric("WriteThroughput", common_1.MetricStatistic.AVERAGE, "WriteThroughput: Average");
    }
    metricWriteIops() {
        return this.metric("WriteIOPS", common_1.MetricStatistic.AVERAGE, "WriteIOPS: Average");
    }
    metric(metricName, statistic, label) {
        return this.metricFactory.createMetric(metricName, statistic, label, this.dimensionsMap, undefined, RdsNamespace);
    }
}
exports.RdsInstanceMetricFactory = RdsInstanceMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
RdsInstanceMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.RdsInstanceMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmRzSW5zdGFuY2VNZXRyaWNGYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmRzSW5zdGFuY2VNZXRyaWNGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EseUNBTXNCO0FBRXRCLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQztBQVMvQixNQUFhLHdCQUF3QjtJQU1uQyxZQUNFLGFBQTRCLEVBQzVCLEtBQW9DO1FBRXBDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsa0JBQWtCO1lBQ3JCLHdCQUF3QixDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUN6RSxDQUFDO0lBRU8sTUFBTSxDQUFDLDJCQUEyQixDQUN4QyxLQUFvQztRQUVwQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNuQixNQUFNLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDO0lBQzNDLENBQUM7SUFFRCwwQkFBMEI7UUFDeEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUNoQixxQkFBcUIsRUFDckIsd0JBQWUsQ0FBQyxHQUFHLEVBQ25CLGtCQUFrQixDQUNuQixDQUFDO0lBQ0osQ0FBQztJQUVELDhCQUE4QjtRQUM1QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsd0JBQWUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELDZCQUE2QjtRQUMzQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQ2hCLGtCQUFrQixFQUNsQix3QkFBZSxDQUFDLE9BQU8sRUFDdkIsMkJBQTJCLENBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQsMkJBQTJCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FDaEIsZ0JBQWdCLEVBQ2hCLHdCQUFlLENBQUMsT0FBTyxFQUN2Qix5QkFBeUIsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxXQUF3QjtRQUNoRCxNQUFNLEtBQUssR0FBRyxjQUFjLEdBQUcsNEJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUNoQixhQUFhLEVBQ2IsZ0NBQXVCLENBQUMsV0FBVyxDQUFDLEVBQ3BDLEtBQUssQ0FDTixDQUFDO0lBQ0osQ0FBQztJQUVELG9CQUFvQjtRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQ2hCLGdCQUFnQixFQUNoQix3QkFBZSxDQUFDLE9BQU8sRUFDdkIseUJBQXlCLENBQzFCLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FDaEIsVUFBVSxFQUNWLHdCQUFlLENBQUMsT0FBTyxFQUN2QixtQkFBbUIsQ0FDcEIsQ0FBQztJQUNKLENBQUM7SUFFRCwwQkFBMEIsQ0FBQyxXQUF3QjtRQUNqRCxNQUFNLEtBQUssR0FBRyxlQUFlLEdBQUcsNEJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUNoQixjQUFjLEVBQ2QsZ0NBQXVCLENBQUMsV0FBVyxDQUFDLEVBQ3BDLEtBQUssQ0FDTixDQUFDO0lBQ0osQ0FBQztJQUVELHFCQUFxQjtRQUNuQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQ2hCLGlCQUFpQixFQUNqQix3QkFBZSxDQUFDLE9BQU8sRUFDdkIsMEJBQTBCLENBQzNCLENBQUM7SUFDSixDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FDaEIsV0FBVyxFQUNYLHdCQUFlLENBQUMsT0FBTyxFQUN2QixvQkFBb0IsQ0FDckIsQ0FBQztJQUNKLENBQUM7SUFFTyxNQUFNLENBQ1osVUFBa0IsRUFDbEIsU0FBMEIsRUFDMUIsS0FBYTtRQUViLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQ3BDLFVBQVUsRUFDVixTQUFTLEVBQ1QsS0FBSyxFQUNMLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxZQUFZLENBQ2IsQ0FBQztJQUNKLENBQUM7O0FBckhILDREQXNIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpbWVuc2lvbnNNYXAgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWNsb3Vkd2F0Y2hcIjtcbmltcG9ydCB7IElEYXRhYmFzZUluc3RhbmNlIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1yZHNcIjtcblxuaW1wb3J0IHtcbiAgTGF0ZW5jeVR5cGUsXG4gIE1ldHJpY0ZhY3RvcnksXG4gIE1ldHJpY1N0YXRpc3RpYyxcbiAgZ2V0TGF0ZW5jeVR5cGVMYWJlbCxcbiAgZ2V0TGF0ZW5jeVR5cGVTdGF0aXN0aWMsXG59IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuY29uc3QgUmRzTmFtZXNwYWNlID0gXCJBV1MvUkRTXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmRzSW5zdGFuY2VNZXRyaWNGYWN0b3J5UHJvcHMge1xuICAvKipcbiAgICogZGF0YWJhc2UgaW5zdGFuY2VcbiAgICovXG4gIHJlYWRvbmx5IGluc3RhbmNlPzogSURhdGFiYXNlSW5zdGFuY2U7XG59XG5cbmV4cG9ydCBjbGFzcyBSZHNJbnN0YW5jZU1ldHJpY0ZhY3Rvcnkge1xuICByZWFkb25seSBpbnN0YW5jZUlkZW50aWZpZXI6IHN0cmluZztcbiAgcmVhZG9ubHkgaW5zdGFuY2U/OiBJRGF0YWJhc2VJbnN0YW5jZTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG1ldHJpY0ZhY3Rvcnk6IE1ldHJpY0ZhY3Rvcnk7XG4gIHByb3RlY3RlZCByZWFkb25seSBkaW1lbnNpb25zTWFwOiBEaW1lbnNpb25zTWFwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG1ldHJpY0ZhY3Rvcnk6IE1ldHJpY0ZhY3RvcnksXG4gICAgcHJvcHM6IFJkc0luc3RhbmNlTWV0cmljRmFjdG9yeVByb3BzXG4gICkge1xuICAgIHRoaXMubWV0cmljRmFjdG9yeSA9IG1ldHJpY0ZhY3Rvcnk7XG4gICAgdGhpcy5pbnN0YW5jZSA9IHByb3BzLmluc3RhbmNlO1xuICAgIHRoaXMuaW5zdGFuY2VJZGVudGlmaWVyID1cbiAgICAgIFJkc0luc3RhbmNlTWV0cmljRmFjdG9yeS5yZXNvbHZlRGJJbnN0YW5jZUlkZW50aWZpZXIocHJvcHMpO1xuICAgIHRoaXMuZGltZW5zaW9uc01hcCA9IHsgREJJbnN0YW5jZUlkZW50aWZpZXI6IHRoaXMuaW5zdGFuY2VJZGVudGlmaWVyIH07XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZXNvbHZlRGJJbnN0YW5jZUlkZW50aWZpZXIoXG4gICAgcHJvcHM6IFJkc0luc3RhbmNlTWV0cmljRmFjdG9yeVByb3BzXG4gICk6IHN0cmluZyB7XG4gICAgaWYgKCFwcm9wcy5pbnN0YW5jZSkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJgaW5zdGFuY2VgIGlzIHJlcXVpcmVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuaW5zdGFuY2UuaW5zdGFuY2VJZGVudGlmaWVyO1xuICB9XG5cbiAgbWV0cmljVG90YWxDb25uZWN0aW9uQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKFxuICAgICAgXCJEYXRhYmFzZUNvbm5lY3Rpb25zXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuU1VNLFxuICAgICAgXCJDb25uZWN0aW9uczogU3VtXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljQXZlcmFnZUNwdVVzYWdlSW5QZXJjZW50KCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYyhcIkNQVVV0aWxpemF0aW9uXCIsIE1ldHJpY1N0YXRpc3RpYy5BVkVSQUdFLCBcIkNQVSBVc2FnZVwiKTtcbiAgfVxuXG4gIG1ldHJpY0F2ZXJhZ2VGcmVlU3RvcmFnZVNwYWNlKCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYyhcbiAgICAgIFwiRnJlZVN0b3JhZ2VTcGFjZVwiLFxuICAgICAgTWV0cmljU3RhdGlzdGljLkFWRVJBR0UsXG4gICAgICBcIkZyZWVTdG9yYWdlU3BhY2U6IEF2ZXJhZ2VcIlxuICAgICk7XG4gIH1cblxuICBtZXRyaWNBdmVyYWdlRnJlZWFibGVNZW1vcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKFxuICAgICAgXCJGcmVlYWJsZU1lbW9yeVwiLFxuICAgICAgTWV0cmljU3RhdGlzdGljLkFWRVJBR0UsXG4gICAgICBcIkZyZWVhYmxlTWVtb3J5OiBBdmVyYWdlXCJcbiAgICApO1xuICB9XG5cbiAgbWV0cmljUmVhZExhdGVuY3lJbk1pbGxpcyhsYXRlbmN5VHlwZTogTGF0ZW5jeVR5cGUpIHtcbiAgICBjb25zdCBsYWJlbCA9IFwiUmVhZExhdGVuY3kgXCIgKyBnZXRMYXRlbmN5VHlwZUxhYmVsKGxhdGVuY3lUeXBlKTtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoXG4gICAgICBcIlJlYWRMYXRlbmN5XCIsXG4gICAgICBnZXRMYXRlbmN5VHlwZVN0YXRpc3RpYyhsYXRlbmN5VHlwZSksXG4gICAgICBsYWJlbFxuICAgICk7XG4gIH1cblxuICBtZXRyaWNSZWFkVGhyb3VnaHB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoXG4gICAgICBcIlJlYWRUaHJvdWdocHV0XCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuQVZFUkFHRSxcbiAgICAgIFwiUmVhZFRocm91Z2hwdXQ6IEF2ZXJhZ2VcIlxuICAgICk7XG4gIH1cblxuICBtZXRyaWNSZWFkSW9wcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoXG4gICAgICBcIlJlYWRJT1BTXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuQVZFUkFHRSxcbiAgICAgIFwiUmVhZElPUFM6IEF2ZXJhZ2VcIlxuICAgICk7XG4gIH1cblxuICBtZXRyaWNXcml0ZUxhdGVuY3lJbk1pbGxpcyhsYXRlbmN5VHlwZTogTGF0ZW5jeVR5cGUpIHtcbiAgICBjb25zdCBsYWJlbCA9IFwiV3JpdGVMYXRlbmN5IFwiICsgZ2V0TGF0ZW5jeVR5cGVMYWJlbChsYXRlbmN5VHlwZSk7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKFxuICAgICAgXCJXcml0ZUxhdGVuY3lcIixcbiAgICAgIGdldExhdGVuY3lUeXBlU3RhdGlzdGljKGxhdGVuY3lUeXBlKSxcbiAgICAgIGxhYmVsXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY1dyaXRlVGhyb3VnaHB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoXG4gICAgICBcIldyaXRlVGhyb3VnaHB1dFwiLFxuICAgICAgTWV0cmljU3RhdGlzdGljLkFWRVJBR0UsXG4gICAgICBcIldyaXRlVGhyb3VnaHB1dDogQXZlcmFnZVwiXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY1dyaXRlSW9wcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoXG4gICAgICBcIldyaXRlSU9QU1wiLFxuICAgICAgTWV0cmljU3RhdGlzdGljLkFWRVJBR0UsXG4gICAgICBcIldyaXRlSU9QUzogQXZlcmFnZVwiXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgbWV0cmljKFxuICAgIG1ldHJpY05hbWU6IHN0cmluZyxcbiAgICBzdGF0aXN0aWM6IE1ldHJpY1N0YXRpc3RpYyxcbiAgICBsYWJlbDogc3RyaW5nXG4gICkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljKFxuICAgICAgbWV0cmljTmFtZSxcbiAgICAgIHN0YXRpc3RpYyxcbiAgICAgIGxhYmVsLFxuICAgICAgdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgUmRzTmFtZXNwYWNlXG4gICAgKTtcbiAgfVxufVxuIl19