"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueJobMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const GlueNamespace = "Glue";
class GlueJobMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.rateComputationMethod =
            props.rateComputationMethod ?? common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            Type: "gauge",
            JobRunId: "ALL",
            JobName: props.jobName,
        };
        this.typeCountDimensionsMap = {
            ...this.dimensionsMap,
            Type: "count",
        };
    }
    metricTotalReadBytesFromS3() {
        return this.metricFactory.createMetric("glue.ALL.s3.filesystem.read_bytes", common_1.MetricStatistic.SUM, "Read (S3)", this.dimensionsMap, undefined, GlueNamespace);
    }
    metricTotalWrittenBytesToS3() {
        return this.metricFactory.createMetric("glue.ALL.s3.filesystem.write_bytes", common_1.MetricStatistic.SUM, "Write (S3)", this.dimensionsMap, undefined, GlueNamespace);
    }
    metricAverageExecutorCpuUsagePercentage() {
        const label = "CPU Usage (executor average)";
        const metric = this.metricFactory.createMetric("glue.ALL.system.cpuSystemLoad", common_1.MetricStatistic.AVERAGE, label, this.dimensionsMap, undefined, GlueNamespace);
        return this.metricFactory.multiplyMetric(metric, 100, label, "cpu");
    }
    metricAverageExecutorMemoryUsagePercentage() {
        const label = "JVM Heap usage (executor average)";
        const metric = this.metricFactory.createMetric("glue.ALL.jvm.heap.usage", common_1.MetricStatistic.AVERAGE, label, this.dimensionsMap, undefined, GlueNamespace);
        return this.metricFactory.multiplyMetric(metric, 100, label, "heap");
    }
    metricActiveExecutorsAverage() {
        return this.metricFactory.createMetric("glue.driver.ExecutorAllocationManager.executors.numberAllExecutors", common_1.MetricStatistic.AVERAGE, "Active Executors", this.dimensionsMap, undefined, GlueNamespace);
    }
    metricCompletedStagesSum() {
        return this.metricFactory.createMetric("glue.driver.aggregate.numCompletedStages", common_1.MetricStatistic.SUM, "Completed Stages", this.typeCountDimensionsMap, undefined, GlueNamespace);
    }
    metricCompletedTasksSum() {
        return this.metricFactory.createMetric("glue.driver.aggregate.numCompletedTasks", common_1.MetricStatistic.SUM, "Completed Tasks", this.typeCountDimensionsMap, undefined, GlueNamespace);
    }
    metricFailedTasksSum() {
        return this.metricFactory.createMetric("glue.driver.aggregate.numFailedTasks", common_1.MetricStatistic.SUM, "Failed Tasks", this.typeCountDimensionsMap, undefined, GlueNamespace);
    }
    metricFailedTasksRate() {
        return this.metricFactory.toRate(this.metricFailedTasksSum(), this.rateComputationMethod, true, "failed", false);
    }
    metricKilledTasksSum() {
        return this.metricFactory.createMetric("glue.driver.aggregate.numKilledTasks", common_1.MetricStatistic.SUM, "Killed Tasks", this.typeCountDimensionsMap, undefined, GlueNamespace);
    }
    metricKilledTasksRate() {
        return this.metricFactory.toRate(this.metricKilledTasksSum(), this.rateComputationMethod, true, "killed", false);
    }
    metricMaximumNeededExecutors() {
        return this.metricFactory.createMetric("glue.driver.ExecutorAllocationManager.executors.numberMaxNeededExecutors", common_1.MetricStatistic.MAX, "Maximum Needed Executors", this.dimensionsMap, undefined, GlueNamespace);
    }
}
exports.GlueJobMetricFactory = GlueJobMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
GlueJobMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.GlueJobMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,