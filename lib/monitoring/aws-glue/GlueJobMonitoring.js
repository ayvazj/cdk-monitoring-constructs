"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueJobMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const GlueJobMetricFactory_1 = require("./GlueJobMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class GlueJobMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const fallbackConstructName = props.jobName;
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        const metricFactory = new GlueJobMetricFactory_1.GlueJobMetricFactory(scope.createMetricFactory(), props);
        this.alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.errorAlarmFactory = new common_1.ErrorAlarmFactory(this.alarmFactory);
        this.errorCountAnnotations = [];
        this.errorRateAnnotations = [];
        this.bytesReadFromS3Metric = metricFactory.metricTotalReadBytesFromS3();
        this.bytesWrittenToS3Metric = metricFactory.metricTotalWrittenBytesToS3();
        this.cpuUsageMetric = metricFactory
            .metricAverageExecutorCpuUsagePercentage()
            .with({ label: "CPU" });
        this.heapMemoryUsageMetric = metricFactory
            .metricAverageExecutorMemoryUsagePercentage()
            .with({ label: "Heap" });
        this.activeExecutorsMetric = metricFactory.metricActiveExecutorsAverage();
        this.completedStagesMetric = metricFactory.metricCompletedStagesSum();
        this.neededExecutorsMetric = metricFactory.metricMaximumNeededExecutors();
        this.failedTaskCountMetric = metricFactory
            .metricFailedTasksSum()
            .with({ label: "Failed" });
        this.failedTaskRateMetric = metricFactory.metricFailedTasksRate();
        this.killedTaskCountMetric = metricFactory
            .metricKilledTasksSum()
            .with({ label: "Killed" });
        this.killedTaskRateMetric = metricFactory.metricKilledTasksRate();
        for (const disambiguator in props.addFailedTaskCountAlarm) {
            const alarmProps = props.addFailedTaskCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.failedTaskCountMetric, common_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addFailedTaskRateAlarm) {
            const alarmProps = props.addFailedTaskRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.failedTaskRateMetric, common_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addKilledTaskCountAlarm) {
            const alarmProps = props.addKilledTaskCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.killedTaskCountMetric, common_1.ErrorType.KILLED, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addKilledTaskRateAlarm) {
            const alarmProps = props.addKilledTaskRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.killedTaskRateMetric, common_1.ErrorType.KILLED, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            // Title
            this.createTitleWidget(),
            // Job Execution
            this.createJobExecutionWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
            // Usages
            this.createUtilizationWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            // Title
            this.createTitleWidget(),
            // Job Execution
            this.createJobExecutionWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            // Data Movement
            this.createDataMovementWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            // Usages
            this.createUtilizationWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            // Errors
            this.createErrorCountWidget(common_1.HalfQuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createErrorRateWidget(common_1.HalfQuarterWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Glue Job",
            title: this.title,
        });
    }
    createJobExecutionWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Job Execution",
            left: [
                this.activeExecutorsMetric,
                this.neededExecutorsMetric,
                this.completedStagesMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createDataMovementWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Data Movement",
            left: [this.bytesReadFromS3Metric, this.bytesWrittenToS3Metric],
            leftYAxis: common_1.SizeAxisBytesFromZero,
        });
    }
    createUtilizationWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU/Memory Usage",
            left: [this.cpuUsageMetric, this.heapMemoryUsageMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
        });
    }
    createErrorCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors",
            left: [this.failedTaskCountMetric, this.killedTaskCountMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.errorCountAnnotations,
        });
    }
    createErrorRateWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors (rate)",
            left: [this.failedTaskRateMetric, this.killedTaskRateMetric],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.errorRateAnnotations,
        });
    }
}
exports.GlueJobMonitoring = GlueJobMonitoring;
_a = JSII_RTTI_SYMBOL_1;
GlueJobMonitoring[_a] = { fqn: "cdk-monitoring-constructs.GlueJobMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,