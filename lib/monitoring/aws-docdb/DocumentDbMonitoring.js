"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentDbMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const DocumentDbMetricFactory_1 = require("./DocumentDbMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class DocumentDbMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const metricFactory = new DocumentDbMetricFactory_1.DocumentDbMetricFactory(scope.createMetricFactory(), props);
        this.cpuUsageMetric = metricFactory.metricAverageCpuUsageInPercent();
        this.readLatencyMetric = metricFactory.metricReadLatencyInMillis(common_1.LatencyType.P90);
        this.writeLatencyMetric = metricFactory.metricWriteLatencyInMillis(common_1.LatencyType.P90);
        this.connectionsMetric = metricFactory.metricMaxConnectionCount();
        this.cursorsMetric = metricFactory.metricMaxCursorCount();
        this.transactionsMetric = metricFactory.metricMaxTransactionOpenCount();
        this.throttledMetric =
            metricFactory.metricOperationsThrottledDueLowMemoryCount();
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: metricFactory.clusterIdentifier,
            namedConstruct: props.cluster,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.url = scope
            .createAwsConsoleUrlFactory()
            .getDocumentDbClusterUrl(metricFactory.clusterIdentifier);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(alarmFactory);
        this.usageAnnotations = [];
        for (const disambiguator in props.addCpuUsageAlarm) {
            const alarmProps = props.addCpuUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCpuUsagePercentAlarm(this.cpuUsageMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createResourceUsageWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createConnectionsWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createLatencyWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createResourceUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createConnectionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createTransactionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLatencyWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "DocumentDB",
            title: this.title,
            goToLinkUrl: this.url,
        });
    }
    createResourceUsageWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU Usage",
            left: [this.cpuUsageMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.usageAnnotations,
        });
    }
    createConnectionsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Connections",
            left: [this.connectionsMetric],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createTransactionsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Transactions",
            left: [this.transactionsMetric, this.cursorsMetric],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency",
            left: [this.readLatencyMetric, this.writeLatencyMetric],
            leftYAxis: common_1.TimeAxisMillisFromZero,
        });
    }
}
exports.DocumentDbMonitoring = DocumentDbMonitoring;
_a = JSII_RTTI_SYMBOL_1;
DocumentDbMonitoring[_a] = { fqn: "cdk-monitoring-constructs.DocumentDbMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,