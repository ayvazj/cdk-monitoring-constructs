"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqsQueueMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const SqsQueueMetricFactory_1 = require("./SqsQueueMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class SqsQueueMonitoring extends common_1.Monitoring {
    constructor(scope, props, invokedFromSuper) {
        super(scope, props);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.queue,
            fallbackConstructName: this.resolveQueueName(props.queue),
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.queueUrl = scope
            .createAwsConsoleUrlFactory()
            .getSqsQueueUrl(props.queue.queueUrl);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.queueAlarmFactory = new common_1.QueueAlarmFactory(alarmFactory);
        this.countAnnotations = [];
        this.ageAnnotations = [];
        this.timeToDrainAnnotations = [];
        const metricFactory = new SqsQueueMetricFactory_1.SqsQueueMetricFactory(scope.createMetricFactory(), props);
        this.visibleMessagesMetric =
            metricFactory.metricApproximateVisibleMessageCount();
        this.incomingMessagesMetric = metricFactory.metricIncomingMessageCount();
        this.deletedMessagesMetric = metricFactory.metricDeletedMessageCount();
        this.oldestMessageAgeMetric =
            metricFactory.metricApproximateAgeOfOldestMessageInSeconds();
        this.messageSizeMetric = metricFactory.metricAverageMessageSizeInBytes();
        this.productionRateMetric = metricFactory.metricProductionRate();
        this.consumptionRateMetric = metricFactory.metricConsumptionRate();
        this.timeToDrainMetric = metricFactory.metricTimeToDrain();
        for (const disambiguator in props.addQueueMinSizeAlarm) {
            const alarmProps = props.addQueueMinSizeAlarm[disambiguator];
            const createdAlarm = this.queueAlarmFactory.addMinQueueMessageCountAlarm(this.visibleMessagesMetric, alarmProps, disambiguator);
            this.countAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addQueueMaxSizeAlarm) {
            const alarmProps = props.addQueueMaxSizeAlarm[disambiguator];
            const createdAlarm = this.queueAlarmFactory.addMaxQueueMessageCountAlarm(this.visibleMessagesMetric, alarmProps, disambiguator);
            this.countAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addQueueMaxMessageAgeAlarm) {
            const alarmProps = props.addQueueMaxMessageAgeAlarm[disambiguator];
            const createdAlarm = this.queueAlarmFactory.addMaxQueueMessageAgeAlarm(this.oldestMessageAgeMetric, alarmProps, disambiguator);
            this.ageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addQueueMaxTimeToDrainMessagesAlarm) {
            const alarmProps = props.addQueueMaxTimeToDrainMessagesAlarm[disambiguator];
            const createdAlarm = this.queueAlarmFactory.addMaxQueueTimeToDrainMessagesAlarm(this.timeToDrainMetric, alarmProps, disambiguator);
            this.timeToDrainAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addQueueMinIncomingMessagesAlarm) {
            const alarmProps = props.addQueueMinIncomingMessagesAlarm[disambiguator];
            const createdAlarm = this.queueAlarmFactory.addMinQueueIncomingMessagesCountAlarm(this.incomingMessagesMetric, alarmProps, disambiguator);
            this.countAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addQueueMaxIncomingMessagesAlarm) {
            const alarmProps = props.addQueueMaxIncomingMessagesAlarm[disambiguator];
            const createdAlarm = this.queueAlarmFactory.addMaxQueueIncomingMessagesCountAlarm(this.incomingMessagesMetric, alarmProps, disambiguator);
            this.countAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        if (!(invokedFromSuper ?? false)) {
            // invoke only when not called from super class, so it is not called twice
            // TODO: find a more elegant solution for this
            props.useCreatedAlarms?.consume(this.createdAlarms());
        }
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            new aws_cloudwatch_1.Row(this.createProducerAndConsumerRateWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight), this.createTimeToDrainWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight)),
            new aws_cloudwatch_1.Row(this.createMessageCountWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight), this.createMessageAgeWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight)),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            new aws_cloudwatch_1.Row(this.createMessageCountWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight), this.createMessageAgeWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight), this.createMessageSizeWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight)),
            new aws_cloudwatch_1.Row(this.createProducerAndConsumerRateWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight), this.createTimeToDrainWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight)),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "SQS Queue",
            title: this.title,
            goToLinkUrl: this.queueUrl,
        });
    }
    createMessageCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Message Count",
            left: [this.visibleMessagesMetric, this.incomingMessagesMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.countAnnotations,
        });
    }
    createMessageAgeWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Oldest Message Age",
            left: [this.oldestMessageAgeMetric],
            leftYAxis: common_1.TimeAxisSecondsFromZero,
            leftAnnotations: this.ageAnnotations,
        });
    }
    createMessageSizeWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Message Size",
            left: [this.messageSizeMetric],
            leftYAxis: common_1.SizeAxisBytesFromZero,
        });
    }
    createProducerAndConsumerRateWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Producer vs Consumer (rate)",
            left: [this.productionRateMetric, this.consumptionRateMetric],
            leftYAxis: common_1.RateAxisFromZero,
        });
    }
    createTimeToDrainWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Time to drain",
            left: [this.timeToDrainMetric],
            leftYAxis: common_1.TimeAxisSecondsFromZero,
        });
    }
    resolveQueueName(queue) {
        // try to take the name (if specified) instead of token
        return queue.node.defaultChild?.queueName;
    }
}
exports.SqsQueueMonitoring = SqsQueueMonitoring;
_a = JSII_RTTI_SYMBOL_1;
SqsQueueMonitoring[_a] = { fqn: "cdk-monitoring-constructs.SqsQueueMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,