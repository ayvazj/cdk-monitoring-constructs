"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqsQueueMonitoringWithDlq = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const SqsQueueMetricFactory_1 = require("./SqsQueueMetricFactory");
const SqsQueueMonitoring_1 = require("./SqsQueueMonitoring");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class SqsQueueMonitoringWithDlq extends SqsQueueMonitoring_1.SqsQueueMonitoring {
    constructor(scope, props) {
        super(scope, props, true);
        const deadLetterMetricFactory = new SqsQueueMetricFactory_1.SqsQueueMetricFactory(scope.createMetricFactory(), {
            ...props,
            queue: props.deadLetterQueue,
        });
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.deadLetterQueue,
            fallbackConstructName: this.resolveQueueName(props.deadLetterQueue),
        });
        this.deadLetterTitle = namingStrategy.resolveHumanReadableName();
        this.deadLetterUrl = scope
            .createAwsConsoleUrlFactory()
            .getSqsQueueUrl(props.deadLetterQueue.queueUrl);
        this.addDeadLetterQueueToSummaryDashboard =
            props.addDeadLetterQueueToSummaryDashboard ?? false;
        const deadLetterAlarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName() + "-DLQ");
        this.deadLetterCountAnnotations = [];
        this.deadLetterAgeAnnotations = [];
        this.deadLetterQueueAlarmFactory = new common_1.QueueAlarmFactory(deadLetterAlarmFactory);
        this.deadLetterQueueVisibleMessagesMetric =
            deadLetterMetricFactory.metricApproximateVisibleMessageCount();
        this.deadLetterQueueIncomingMessagesMetric =
            deadLetterMetricFactory.metricIncomingMessageCount();
        this.deadLetterQueueOldestMessageAgeMetric =
            deadLetterMetricFactory.metricApproximateAgeOfOldestMessageInSeconds();
        for (const disambiguator in props.addDeadLetterQueueMaxSizeAlarm) {
            const alarmProps = props.addDeadLetterQueueMaxSizeAlarm[disambiguator];
            const createdAlarm = this.deadLetterQueueAlarmFactory.addMaxQueueMessageCountAlarm(this.deadLetterQueueVisibleMessagesMetric, alarmProps, disambiguator);
            this.deadLetterCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addDeadLetterQueueMaxMessageAgeAlarm) {
            const alarmProps = props.addDeadLetterQueueMaxMessageAgeAlarm[disambiguator];
            const createdAlarm = this.deadLetterQueueAlarmFactory.addMaxQueueMessageAgeAlarm(this.deadLetterQueueOldestMessageAgeMetric, alarmProps, disambiguator);
            this.deadLetterAgeAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addDeadLetterQueueMaxIncomingMessagesAlarm) {
            const alarmProps = props.addDeadLetterQueueMaxIncomingMessagesAlarm[disambiguator];
            const createdAlarm = this.deadLetterQueueAlarmFactory.addMaxQueueIncomingMessagesCountAlarm(this.deadLetterQueueIncomingMessagesMetric, alarmProps, disambiguator);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        const addToSummary = this.addDeadLetterQueueToSummaryDashboard ?? true;
        if (!addToSummary) {
            // do not show the DLQ widgets at all
            return super.summaryWidgets();
        }
        return [
            ...super.summaryWidgets(),
            this.createDeadLetterMessageCountWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
            this.createDeadLetterMessageAgeWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            ...super.widgets(),
            this.createDeadLetterTitleWidget(),
            this.createDeadLetterMessageCountWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight),
            this.createDeadLetterMessageAgeWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createDeadLetterTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "SQS Dead-Letter Queue",
            title: this.deadLetterTitle,
            goToLinkUrl: this.deadLetterUrl,
        });
    }
    createDeadLetterMessageCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "DLQ: Message Count",
            left: [
                this.deadLetterQueueVisibleMessagesMetric,
                this.deadLetterQueueIncomingMessagesMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.deadLetterCountAnnotations,
        });
    }
    createDeadLetterMessageAgeWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "DLQ: Oldest Message Age",
            left: [this.deadLetterQueueOldestMessageAgeMetric],
            leftYAxis: common_1.TimeAxisSecondsFromZero,
            leftAnnotations: this.deadLetterAgeAnnotations,
        });
    }
}
exports.SqsQueueMonitoringWithDlq = SqsQueueMonitoringWithDlq;
_a = JSII_RTTI_SYMBOL_1;
SqsQueueMonitoringWithDlq[_a] = { fqn: "cdk-monitoring-constructs.SqsQueueMonitoringWithDlq", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,