"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeBuildProjectMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const CodeBuildProjectMetricFactory_1 = require("./CodeBuildProjectMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class CodeBuildProjectMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.project,
            fallbackConstructName: this.resolveProjectName(props.project),
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.projectUrl = scope
            .createAwsConsoleUrlFactory()
            .getCodeBuildProjectUrl(props.project.projectName);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.durationAlarmFactory = new common_1.LatencyAlarmFactory(alarmFactory);
        this.errorAlarmFactory = new common_1.ErrorAlarmFactory(alarmFactory);
        this.durationAnnotations = [];
        this.errorCountAnnotations = [];
        this.errorRateAnnotations = [];
        const metricFactory = new CodeBuildProjectMetricFactory_1.CodeBuildProjectMetricFactory(scope.createMetricFactory(), props);
        this.buildCountMetric = metricFactory.metricBuildCount();
        this.succeededBuildCountMetric = metricFactory.metricSucceededBuildCount();
        this.failedBuildCountMetric = metricFactory.metricFailedBuildCount();
        this.failedBuildRateMetric = metricFactory.metricFailedBuildRate();
        this.durationP99InSecondsMetric =
            metricFactory.metricDurationP99InSeconds();
        this.durationP90InSecondsMetric =
            metricFactory.metricDurationP90InSeconds();
        this.durationP50InSecondsMetric =
            metricFactory.metricDurationP50InSeconds();
        for (const disambiguator in props.addDurationP99Alarm) {
            const alarmProps = props.addDurationP99Alarm[disambiguator];
            const createdAlarm = this.durationAlarmFactory.addDurationAlarm(this.durationP99InSecondsMetric, common_1.LatencyType.P99, alarmProps, disambiguator);
            this.durationAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addDurationP90Alarm) {
            const alarmProps = props.addDurationP90Alarm[disambiguator];
            const createdAlarm = this.durationAlarmFactory.addDurationAlarm(this.durationP90InSecondsMetric, common_1.LatencyType.P90, alarmProps, disambiguator);
            this.durationAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addDurationP50Alarm) {
            const alarmProps = props.addDurationP50Alarm[disambiguator];
            const createdAlarm = this.durationAlarmFactory.addDurationAlarm(this.durationP50InSecondsMetric, common_1.LatencyType.P50, alarmProps, disambiguator);
            this.durationAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addFailedBuildCountAlarm) {
            const alarmProps = props.addFailedBuildCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.failedBuildCountMetric, common_1.ErrorType.FAILURE, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addFailedBuildRateAlarm) {
            const alarmProps = props.addFailedBuildRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.failedBuildRateMetric, common_1.ErrorType.FAILURE, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createBuildCountsWidget(),
            this.createDurationWidget(),
            this.createFailedBuildRateWidget(),
        ];
    }
    summaryWidgets() {
        // TODO: verify sizes, mainly heights
        return this.widgets();
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "CodeBuild Project",
            title: this.title,
            goToLinkUrl: this.projectUrl,
        });
    }
    createBuildCountsWidget() {
        return new aws_cloudwatch_1.GraphWidget({
            width: common_1.ThirdWidth,
            height: common_1.DefaultGraphWidgetHeight,
            title: "Builds",
            left: [
                this.buildCountMetric,
                this.succeededBuildCountMetric,
                this.failedBuildCountMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.errorCountAnnotations,
        });
    }
    createDurationWidget() {
        return new aws_cloudwatch_1.GraphWidget({
            width: common_1.ThirdWidth,
            height: common_1.DefaultGraphWidgetHeight,
            title: "Duration",
            left: [
                this.durationP50InSecondsMetric,
                this.durationP90InSecondsMetric,
                this.durationP99InSecondsMetric,
            ],
            leftYAxis: common_1.TimeAxisSecondsFromZero,
            leftAnnotations: this.durationAnnotations,
        });
    }
    createFailedBuildRateWidget() {
        return new aws_cloudwatch_1.GraphWidget({
            width: common_1.ThirdWidth,
            height: common_1.DefaultGraphWidgetHeight,
            title: "Failed Builds (rate)",
            left: [this.failedBuildRateMetric],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.errorRateAnnotations,
        });
    }
    resolveProjectName(project) {
        return project.node.defaultChild?.name;
    }
}
exports.CodeBuildProjectMonitoring = CodeBuildProjectMonitoring;
_a = JSII_RTTI_SYMBOL_1;
CodeBuildProjectMonitoring[_a] = { fqn: "cdk-monitoring-constructs.CodeBuildProjectMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,