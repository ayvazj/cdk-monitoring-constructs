"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluentBitMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const FluentBitMetricFactory_1 = require("./FluentBitMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class FluentBitMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        this.logGroupName = props.logGroup.logGroupName;
        this.metricFactory = new FluentBitMetricFactory_1.FluentBitMetricFactory(scope, props);
        this.storageMetrics = this.metricFactory.storageMetrics(props.logGroup);
        this.inputMetrics = this.metricFactory.inputMetrics(props.logGroup);
        this.outputMetrics = this.metricFactory.outputMetrics(props.logGroup);
        this.filterMetrics = this.metricFactory.filterMetrics(props.logGroup);
        if (props.createOptionalMetricFilters) {
            this.metricFactory.metricsWithoutWidgets(props.logGroup);
        }
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.inputMetricsWidget(),
            this.outputMetricsWidget(),
            this.filterMetricsWidget(),
            this.storageMetricsWidget(),
        ];
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.outputMetricsWidget(),
            this.storageMetricsWidget(),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            title: "FluentBit",
        });
    }
    inputMetricsWidget() {
        return this.createMetricWidget([...Object.values(this.inputMetrics)], "Input Metrics");
    }
    outputMetricsWidget() {
        return this.createMetricWidget([...Object.values(this.outputMetrics)], "Output Metrics");
    }
    filterMetricsWidget() {
        return this.createMetricWidget([...Object.values(this.filterMetrics)], "Filter Metrics");
    }
    storageMetricsWidget() {
        return this.createMetricWidget([...Object.values(this.storageMetrics)], "Storage Metrics");
    }
    createMetricWidget(metrics, title) {
        return new aws_cloudwatch_1.GraphWidget({
            width: common_1.HalfWidth,
            height: common_1.DefaultGraphWidgetHeight,
            title,
            left: metrics,
            leftAnnotations: undefined,
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
}
exports.FluentBitMonitoring = FluentBitMonitoring;
_a = JSII_RTTI_SYMBOL_1;
FluentBitMonitoring[_a] = { fqn: "cdk-monitoring-constructs.FluentBitMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmx1ZW50Qml0TW9uaXRvcmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZsdWVudEJpdE1vbml0b3JpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrREFBMEU7QUFFMUUscUVBR2tDO0FBQ2xDLHlDQVFzQjtBQUN0QiwrQ0FBeUQ7QUFrQnpELE1BQWEsbUJBQW9CLFNBQVEsbUJBQVU7SUFRakQsWUFBWSxLQUFzQixFQUFFLEtBQStCO1FBQ2pFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUNoRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksK0NBQXNCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RFLElBQUksS0FBSyxDQUFDLDJCQUEyQixFQUFFO1lBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPO1lBQ0wsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUN6QixJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDMUIsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFCLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVELGNBQWM7UUFDWixPQUFPO1lBQ0wsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUMxQixJQUFJLENBQUMsb0JBQW9CLEVBQUU7U0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsT0FBTyxJQUFJLGtDQUFzQixDQUFDO1lBQ2hDLEtBQUssRUFBRSxXQUFXO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTyxrQkFBa0I7UUFDeEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQzVCLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUNyQyxlQUFlLENBQ2hCLENBQUM7SUFDSixDQUFDO0lBQ08sbUJBQW1CO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUM1QixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFDdEMsZ0JBQWdCLENBQ2pCLENBQUM7SUFDSixDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUM1QixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFDdEMsZ0JBQWdCLENBQ2pCLENBQUM7SUFDSixDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUM1QixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFDdkMsaUJBQWlCLENBQ2xCLENBQUM7SUFDSixDQUFDO0lBRU8sa0JBQWtCLENBQ3hCLE9BQWlDLEVBQ2pDLEtBQWE7UUFFYixPQUFPLElBQUksNEJBQVcsQ0FBQztZQUNyQixLQUFLLEVBQUUsa0JBQVM7WUFDaEIsTUFBTSxFQUFFLGlDQUF3QjtZQUNoQyxLQUFLO1lBQ0wsSUFBSSxFQUFFLE9BQU87WUFDYixlQUFlLEVBQUUsU0FBUztZQUMxQixTQUFTLEVBQUUsMEJBQWlCO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBcEZILGtEQXFGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoV2lkZ2V0LCBJV2lkZ2V0LCBNZXRyaWMgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWNsb3Vkd2F0Y2hcIjtcbmltcG9ydCB7IElMb2dHcm91cCB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbG9nc1wiO1xuaW1wb3J0IHtcbiAgRmx1ZW50Qml0TWV0cmljRmFjdG9yeSxcbiAgRmx1ZW50Qml0TWV0cmljRmFjdG9yeVByb3BzLFxufSBmcm9tIFwiLi9GbHVlbnRCaXRNZXRyaWNGYWN0b3J5XCI7XG5pbXBvcnQge1xuICBCYXNlTW9uaXRvcmluZ1Byb3BzLFxuICBDb3VudEF4aXNGcm9tWmVybyxcbiAgRGVmYXVsdEdyYXBoV2lkZ2V0SGVpZ2h0LFxuICBIYWxmV2lkdGgsXG4gIE1ldHJpY1dpdGhBbGFybVN1cHBvcnQsXG4gIE1vbml0b3JpbmcsXG4gIE1vbml0b3JpbmdTY29wZSxcbn0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgTW9uaXRvcmluZ0hlYWRlcldpZGdldCB9IGZyb20gXCIuLi8uLi9kYXNoYm9hcmRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGbHVlbnRCaXRNb25pdG9yaW5nUHJvcHNcbiAgZXh0ZW5kcyBGbHVlbnRCaXRNZXRyaWNGYWN0b3J5UHJvcHMsXG4gICAgQmFzZU1vbml0b3JpbmdQcm9wcyB7XG4gIC8qKlxuICAgKiBMb2cgZ3JvdXAgdGhhdCBjb250YWlucyBGbHVlbnRCaXQgbWV0cmljIGxvZ3NcbiAgICovXG4gIHJlYWRvbmx5IGxvZ0dyb3VwOiBJTG9nR3JvdXA7XG5cbiAgLyoqXG4gICAqIE1ldHJpY3MgZm9yIGlucHV0IGJ5dGVzIHRvdGFsLCBvdXRwdXQgYnl0ZXMgdG90YWwgYW5kIG91dHB1dCByZWNvcmRzIHRvdGFsIGFyZSBub3Qgc2hvd24gb24gZGVmYXVsdCBkYXNoYm9hcmQuXG4gICAqIElmIHlvdSB3YW50IHRvIGdldCBNZXRyaWNGaWx0ZXJzIGNyZWF0ZWQgdG8gaGF2ZSB0aG9zZSBtZXRyaWNzIHByZXNlbnQgaW4gQ2xvdWRXYXRjaCBzZXQgdGhpcyBmbGFnIHRvIHRydWVcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGNyZWF0ZU9wdGlvbmFsTWV0cmljRmlsdGVycz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBGbHVlbnRCaXRNb25pdG9yaW5nIGV4dGVuZHMgTW9uaXRvcmluZyB7XG4gIHByb3RlY3RlZCByZWFkb25seSBsb2dHcm91cE5hbWU6IHN0cmluZztcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG1ldHJpY0ZhY3Rvcnk6IEZsdWVudEJpdE1ldHJpY0ZhY3Rvcnk7XG4gIHByb3RlY3RlZCByZWFkb25seSBzdG9yYWdlTWV0cmljczogTWV0cmljW107XG4gIHByb3RlY3RlZCByZWFkb25seSBpbnB1dE1ldHJpY3M6IE1ldHJpY1tdO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgb3V0cHV0TWV0cmljczogTWV0cmljW107XG4gIHByb3RlY3RlZCByZWFkb25seSBmaWx0ZXJNZXRyaWNzOiBNZXRyaWNbXTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogTW9uaXRvcmluZ1Njb3BlLCBwcm9wczogRmx1ZW50Qml0TW9uaXRvcmluZ1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIHByb3BzKTtcbiAgICB0aGlzLmxvZ0dyb3VwTmFtZSA9IHByb3BzLmxvZ0dyb3VwLmxvZ0dyb3VwTmFtZTtcbiAgICB0aGlzLm1ldHJpY0ZhY3RvcnkgPSBuZXcgRmx1ZW50Qml0TWV0cmljRmFjdG9yeShzY29wZSwgcHJvcHMpO1xuXG4gICAgdGhpcy5zdG9yYWdlTWV0cmljcyA9IHRoaXMubWV0cmljRmFjdG9yeS5zdG9yYWdlTWV0cmljcyhwcm9wcy5sb2dHcm91cCk7XG4gICAgdGhpcy5pbnB1dE1ldHJpY3MgPSB0aGlzLm1ldHJpY0ZhY3RvcnkuaW5wdXRNZXRyaWNzKHByb3BzLmxvZ0dyb3VwKTtcbiAgICB0aGlzLm91dHB1dE1ldHJpY3MgPSB0aGlzLm1ldHJpY0ZhY3Rvcnkub3V0cHV0TWV0cmljcyhwcm9wcy5sb2dHcm91cCk7XG4gICAgdGhpcy5maWx0ZXJNZXRyaWNzID0gdGhpcy5tZXRyaWNGYWN0b3J5LmZpbHRlck1ldHJpY3MocHJvcHMubG9nR3JvdXApO1xuICAgIGlmIChwcm9wcy5jcmVhdGVPcHRpb25hbE1ldHJpY0ZpbHRlcnMpIHtcbiAgICAgIHRoaXMubWV0cmljRmFjdG9yeS5tZXRyaWNzV2l0aG91dFdpZGdldHMocHJvcHMubG9nR3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHdpZGdldHMoKTogSVdpZGdldFtdIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy5jcmVhdGVUaXRsZVdpZGdldCgpLFxuICAgICAgdGhpcy5pbnB1dE1ldHJpY3NXaWRnZXQoKSxcbiAgICAgIHRoaXMub3V0cHV0TWV0cmljc1dpZGdldCgpLFxuICAgICAgdGhpcy5maWx0ZXJNZXRyaWNzV2lkZ2V0KCksXG4gICAgICB0aGlzLnN0b3JhZ2VNZXRyaWNzV2lkZ2V0KCksXG4gICAgXTtcbiAgfVxuXG4gIHN1bW1hcnlXaWRnZXRzKCk6IElXaWRnZXRbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMuY3JlYXRlVGl0bGVXaWRnZXQoKSxcbiAgICAgIHRoaXMub3V0cHV0TWV0cmljc1dpZGdldCgpLFxuICAgICAgdGhpcy5zdG9yYWdlTWV0cmljc1dpZGdldCgpLFxuICAgIF07XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVRpdGxlV2lkZ2V0KCkge1xuICAgIHJldHVybiBuZXcgTW9uaXRvcmluZ0hlYWRlcldpZGdldCh7XG4gICAgICB0aXRsZTogXCJGbHVlbnRCaXRcIixcbiAgICB9KTtcbiAgfVxuICBwcml2YXRlIGlucHV0TWV0cmljc1dpZGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXRyaWNXaWRnZXQoXG4gICAgICBbLi4uT2JqZWN0LnZhbHVlcyh0aGlzLmlucHV0TWV0cmljcyldLFxuICAgICAgXCJJbnB1dCBNZXRyaWNzXCJcbiAgICApO1xuICB9XG4gIHByaXZhdGUgb3V0cHV0TWV0cmljc1dpZGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXRyaWNXaWRnZXQoXG4gICAgICBbLi4uT2JqZWN0LnZhbHVlcyh0aGlzLm91dHB1dE1ldHJpY3MpXSxcbiAgICAgIFwiT3V0cHV0IE1ldHJpY3NcIlxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlck1ldHJpY3NXaWRnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlTWV0cmljV2lkZ2V0KFxuICAgICAgWy4uLk9iamVjdC52YWx1ZXModGhpcy5maWx0ZXJNZXRyaWNzKV0sXG4gICAgICBcIkZpbHRlciBNZXRyaWNzXCJcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdG9yYWdlTWV0cmljc1dpZGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVNZXRyaWNXaWRnZXQoXG4gICAgICBbLi4uT2JqZWN0LnZhbHVlcyh0aGlzLnN0b3JhZ2VNZXRyaWNzKV0sXG4gICAgICBcIlN0b3JhZ2UgTWV0cmljc1wiXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTWV0cmljV2lkZ2V0KFxuICAgIG1ldHJpY3M6IE1ldHJpY1dpdGhBbGFybVN1cHBvcnRbXSxcbiAgICB0aXRsZTogc3RyaW5nXG4gICk6IEdyYXBoV2lkZ2V0IHtcbiAgICByZXR1cm4gbmV3IEdyYXBoV2lkZ2V0KHtcbiAgICAgIHdpZHRoOiBIYWxmV2lkdGgsXG4gICAgICBoZWlnaHQ6IERlZmF1bHRHcmFwaFdpZGdldEhlaWdodCxcbiAgICAgIHRpdGxlLFxuICAgICAgbGVmdDogbWV0cmljcyxcbiAgICAgIGxlZnRBbm5vdGF0aW9uczogdW5kZWZpbmVkLFxuICAgICAgbGVmdFlBeGlzOiBDb3VudEF4aXNGcm9tWmVybyxcbiAgICB9KTtcbiAgfVxufVxuIl19