"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedshiftClusterMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const RedshiftClusterMetricFactory_1 = require("./RedshiftClusterMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class RedshiftClusterMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: props.clusterIdentifier,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.url = scope
            .createAwsConsoleUrlFactory()
            .getRedshiftClusterUrl(props.clusterIdentifier);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(alarmFactory);
        this.latencyAlarmFactory = new common_1.LatencyAlarmFactory(alarmFactory);
        this.connectionAlarmFactory = new common_1.ConnectionAlarmFactory(alarmFactory);
        this.queryDurationAnnotations = [];
        this.connectionAnnotations = [];
        this.usageAnnotations = [];
        const metricFactory = new RedshiftClusterMetricFactory_1.RedshiftClusterMetricFactory(scope.createMetricFactory(), props);
        this.connectionsMetric = metricFactory.metricTotalConnectionCount();
        this.diskSpaceUsageMetric =
            metricFactory.metricAverageDiskSpaceUsageInPercent();
        this.cpuUsageMetric = metricFactory.metricAverageCpuUsageInPercent();
        this.shortQueryDurationMetric =
            metricFactory.metricShortQueryDurationP90InMillis();
        this.mediumQueryDurationMetric =
            metricFactory.metricMediumQueryDurationP90InMillis();
        this.longQueryDurationMetric =
            metricFactory.metricLongQueryDurationP90InMillis();
        this.readLatencyMetric = metricFactory.metricReadLatencyP90InMillis();
        this.writeLatencyMetric = metricFactory.metricWriteLatencyP90InMillis();
        this.maintenanceModeMetric = metricFactory.metricMaintenanceModeEnabled();
        for (const disambiguator in props.addDiskSpaceUsageAlarm) {
            const alarmProps = props.addDiskSpaceUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxDiskUsagePercentAlarm(this.diskSpaceUsageMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addCpuUsageAlarm) {
            const alarmProps = props.addCpuUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCpuUsagePercentAlarm(this.cpuUsageMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxLongQueryDurationAlarm) {
            const alarmProps = props.addMaxLongQueryDurationAlarm[disambiguator];
            const createdAlarm = this.latencyAlarmFactory.addDurationAlarm(this.longQueryDurationMetric, common_1.LatencyType.P90, alarmProps, disambiguator);
            this.queryDurationAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinConnectionCountAlarm) {
            const alarmProps = props.addMinConnectionCountAlarm[disambiguator];
            const createdAlarm = this.connectionAlarmFactory.addMinConnectionCountAlarm(this.connectionsMetric, alarmProps, disambiguator);
            this.connectionAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxConnectionCountAlarm) {
            const alarmProps = props.addMaxConnectionCountAlarm[disambiguator];
            const createdAlarm = this.connectionAlarmFactory.addMaxConnectionCountAlarm(this.connectionsMetric, alarmProps, disambiguator);
            this.connectionAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createCpuAndDiskUsageWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createConnectionsWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createQueryDurationWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createCpuAndDiskUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createConnectionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createQueryDurationWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLatencyWidget(common_1.HalfQuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createMaintenanceWidget(common_1.HalfQuarterWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Redshift Cluster",
            title: this.title,
            goToLinkUrl: this.url,
        });
    }
    createCpuAndDiskUsageWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU/Disk Usage",
            left: [this.cpuUsageMetric, this.diskSpaceUsageMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.usageAnnotations,
        });
    }
    createConnectionsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Connections",
            left: [this.connectionsMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.connectionAnnotations,
        });
    }
    createQueryDurationWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Query Duration",
            left: [
                this.shortQueryDurationMetric,
                this.mediumQueryDurationMetric,
                this.longQueryDurationMetric,
            ],
            leftYAxis: common_1.TimeAxisMillisFromZero,
            leftAnnotations: this.queryDurationAnnotations,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency",
            left: [this.readLatencyMetric, this.writeLatencyMetric],
            leftYAxis: common_1.TimeAxisMillisFromZero,
        });
    }
    createMaintenanceWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Maintenance",
            left: [this.maintenanceModeMetric],
            leftYAxis: common_1.BooleanAxisFromZeroToOne,
        });
    }
}
exports.RedshiftClusterMonitoring = RedshiftClusterMonitoring;
_a = JSII_RTTI_SYMBOL_1;
RedshiftClusterMonitoring[_a] = { fqn: "cdk-monitoring-constructs.RedshiftClusterMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,