"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElastiCacheClusterMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const ElastiCacheClusterMetricFactory_1 = require("./ElastiCacheClusterMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class ElastiCacheClusterMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        this.clusterType = props.clusterType;
        const clusterType = common_1.capitalizeFirstLetterOnly(ElastiCacheClusterMetricFactory_1.ElastiCacheClusterType[props.clusterType]);
        const fallbackConstructName = [clusterType, props.clusterId ?? "ALL"].join("-");
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        if (props.clusterId) {
            this.clusterUrl = scope
                .createAwsConsoleUrlFactory()
                .getElastiCacheClusterUrl(props.clusterId, props.clusterType);
        }
        const metricFactory = new ElastiCacheClusterMetricFactory_1.ElastiCacheClusterMetricFactory(scope.createMetricFactory(), props);
        this.connectionsMetric = metricFactory.metricAverageConnections();
        this.cpuUsageMetric = metricFactory.metricMaxCpuUtilizationInPercent();
        this.redisEngineCpuUsageMetric =
            metricFactory.metricMaxRedisEngineCpuUtilizationInPercent();
        this.freeableMemoryMetric =
            metricFactory.metricAverageFreeableMemoryInBytes();
        this.unusedMemoryMetric = metricFactory.metricAverageUnusedMemoryInBytes();
        this.swapMemoryMetric = metricFactory.metricAverageSwapUsageInBytes();
        this.itemsMemoryMetric =
            metricFactory.metricAverageCachedItemsSizeInBytes();
        this.itemsCountMetrics = metricFactory.metricMaxItemCount();
        this.itemsEvictedMetrics = metricFactory.metricEvictions();
        this.cpuUsageAnnotations = [];
        this.redisEngineCpuUsageAnnotations = [];
        this.itemsCountAnnotations = [];
        this.evictedItemsCountAnnotations = [];
        this.memoryUsageAnnotations = [];
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(alarmFactory);
        this.elastiCacheAlarmFactory = new common_1.ElastiCacheAlarmFactory(alarmFactory);
        for (const disambiguator in props.addCpuUsageAlarm) {
            const alarmProps = props.addCpuUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCpuUsagePercentAlarm(this.cpuUsageMetric, alarmProps, disambiguator);
            this.cpuUsageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        if (props.addRedisEngineCpuUsageAlarm !== undefined &&
            props.clusterType !== ElastiCacheClusterMetricFactory_1.ElastiCacheClusterType.REDIS) {
            throw new Error("It is only possible to alarm on Redis Engine CPU Usage for Redis clusters");
        }
        for (const disambiguator in props.addRedisEngineCpuUsageAlarm) {
            const alarmProps = props.addRedisEngineCpuUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCpuUsagePercentAlarm(this.redisEngineCpuUsageMetric, alarmProps, disambiguator, undefined, "RedisEngine");
            this.redisEngineCpuUsageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxItemsCountAlarm) {
            const alarmProps = props.addMaxItemsCountAlarm[disambiguator];
            const createdAlarm = this.elastiCacheAlarmFactory.addMaxItemsCountAlarm(this.itemsCountMetrics, alarmProps, disambiguator);
            this.itemsCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxEvictedItemsCountAlarm) {
            const alarmProps = props.addMaxEvictedItemsCountAlarm[disambiguator];
            const createdAlarm = this.elastiCacheAlarmFactory.addMaxEvictedItemsCountAlarm(this.itemsEvictedMetrics, alarmProps, disambiguator);
            this.evictedItemsCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinFreeableMemoryAlarm) {
            const alarmProps = props.addMinFreeableMemoryAlarm[disambiguator];
            const createdAlarm = this.elastiCacheAlarmFactory.addMinFreeableMemoryAlarm(this.freeableMemoryMetric, alarmProps, disambiguator);
            this.memoryUsageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxUsedSwapMemoryAlarm) {
            const alarmProps = props.addMaxUsedSwapMemoryAlarm[disambiguator];
            const createdAlarm = this.elastiCacheAlarmFactory.addMaxUsedSwapMemoryAlarm(this.swapMemoryMetric, alarmProps, disambiguator);
            this.memoryUsageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createCpuUsageWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createMemoryUsageWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createItemCountWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        if (this.clusterType === ElastiCacheClusterMetricFactory_1.ElastiCacheClusterType.REDIS) {
            return [
                this.createTitleWidget(),
                new aws_cloudwatch_1.Column(this.createCpuUsageWidget(common_1.QuarterWidth, common_1.DefaultTwoLinerGraphWidgetHalfHeight), this.createRedisEngineCpuUsageWidget(common_1.QuarterWidth, common_1.DefaultTwoLinerGraphWidgetHalfHeight)),
                this.createMemoryUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createConnectionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createItemCountWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            ];
        }
        else {
            return [
                this.createTitleWidget(),
                this.createCpuUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createMemoryUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createConnectionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createItemCountWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            ];
        }
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "ElastiCache Cluster",
            title: this.title,
            goToLinkUrl: this.clusterUrl,
        });
    }
    createCpuUsageWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU Utilization",
            left: [this.cpuUsageMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.cpuUsageAnnotations,
        });
    }
    createRedisEngineCpuUsageWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Engine CPU Utilization",
            left: [this.redisEngineCpuUsageMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.redisEngineCpuUsageAnnotations,
        });
    }
    createMemoryUsageWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Memory Utilization",
            left: [
                this.freeableMemoryMetric,
                this.unusedMemoryMetric,
                this.swapMemoryMetric,
            ],
            leftYAxis: common_1.SizeAxisBytesFromZero,
            leftAnnotations: this.memoryUsageAnnotations,
        });
    }
    createItemCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Items",
            left: [this.itemsCountMetrics],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.itemsCountAnnotations,
            right: [this.itemsEvictedMetrics],
            rightYAxis: common_1.CountAxisFromZero,
            rightAnnotations: this.evictedItemsCountAnnotations,
        });
    }
    createConnectionsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Connections",
            left: [this.connectionsMetric],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
}
exports.ElastiCacheClusterMonitoring = ElastiCacheClusterMonitoring;
_a = JSII_RTTI_SYMBOL_1;
ElastiCacheClusterMonitoring[_a] = { fqn: "cdk-monitoring-constructs.ElastiCacheClusterMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,