"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayV2HttpApiMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const ApiGatewayV2HttpApiMetricFactory_1 = require("./ApiGatewayV2HttpApiMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
const DefaultLatencyTypesToRender = [
    common_1.LatencyType.P50,
    common_1.LatencyType.P90,
    common_1.LatencyType.P99,
];
class ApiGatewayV2HttpApiMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        // used when humanReadableName is not provided by user
        const fallbackNameArray = [props.api.apiId];
        fallbackNameArray.push(props.apiStage ?? "$default");
        if (props.apiMethod) {
            fallbackNameArray.push(props.apiMethod);
        }
        if (props.apiResource) {
            fallbackNameArray.push(props.apiResource);
        }
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.api,
            fallbackConstructName: fallbackNameArray
                .join("-")
                .replace(/[^a-zA-Z0-9-_]/g, ""),
            humanReadableName: props.humanReadableName ?? fallbackNameArray.join(" "),
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.errorAlarmFactory = new common_1.ErrorAlarmFactory(this.alarmFactory);
        this.tpsAlarmFactory = new common_1.TpsAlarmFactory(this.alarmFactory);
        this.latencyAlarmFactory = new common_1.LatencyAlarmFactory(this.alarmFactory);
        this.tpsAnnotations = [];
        this.latencyAnnotations = [];
        this.errorCountAnnotations = [];
        this.errorRateAnnotations = [];
        const metricFactory = new ApiGatewayV2HttpApiMetricFactory_1.ApiGatewayV2HttpApiMetricFactory(scope.createMetricFactory(), props);
        this.tpsMetric = metricFactory.metricTps();
        this.latencyMetrics = {};
        this.integrationLatencyMetrics = {};
        this.latencyTypesToRender = [
            ...(props.latencyTypesToRender ?? DefaultLatencyTypesToRender),
        ];
        this.error4xxCountMetric = metricFactory.metric4xxCount();
        this.error4xxRateMetric = metricFactory.metric4xxRate();
        this.error5xxCountMetric = metricFactory.metric5xxCount();
        this.error5xxRateMetric = metricFactory.metric5xxRate();
        const latencyAlarmDefinitions = {
            [common_1.LatencyType.P50]: props.addLatencyP50Alarm,
            [common_1.LatencyType.P70]: props.addLatencyP70Alarm,
            [common_1.LatencyType.P90]: props.addLatencyP90Alarm,
            [common_1.LatencyType.P95]: props.addLatencyP95Alarm,
            [common_1.LatencyType.P99]: props.addLatencyP99Alarm,
            [common_1.LatencyType.P999]: props.addLatencyP999Alarm,
            [common_1.LatencyType.P9999]: props.addLatencyP9999Alarm,
            [common_1.LatencyType.P100]: props.addLatencyP100Alarm,
            [common_1.LatencyType.TM50]: props.addLatencyTM50Alarm,
            [common_1.LatencyType.TM70]: props.addLatencyTM70Alarm,
            [common_1.LatencyType.TM90]: props.addLatencyTM90Alarm,
            [common_1.LatencyType.TM95]: props.addLatencyTM95Alarm,
            [common_1.LatencyType.TM99]: props.addLatencyTM99Alarm,
            [common_1.LatencyType.TM999]: props.addLatencyTM999Alarm,
            [common_1.LatencyType.TM9999]: props.addLatencyTM9999Alarm,
            [common_1.LatencyType.TM95_TOP]: props.addLatencyTM95OutlierAlarm,
            [common_1.LatencyType.TM99_TOP]: props.addLatencyTM99OutlierAlarm,
            [common_1.LatencyType.TM999_TOP]: props.addLatencyTM999OutlierAlarm,
            [common_1.LatencyType.TM9999_TOP]: props.addLatencyTM999OutlierAlarm,
            [common_1.LatencyType.AVERAGE]: props.addLatencyAverageAlarm,
        };
        const integrationLatencyAlarmDefinitions = {
            [common_1.LatencyType.P50]: props.addIntegrationLatencyP50Alarm,
            [common_1.LatencyType.P70]: props.addIntegrationLatencyP70Alarm,
            [common_1.LatencyType.P90]: props.addIntegrationLatencyP90Alarm,
            [common_1.LatencyType.P95]: props.addIntegrationLatencyP95Alarm,
            [common_1.LatencyType.P99]: props.addIntegrationLatencyP99Alarm,
            [common_1.LatencyType.P999]: props.addIntegrationLatencyP999Alarm,
            [common_1.LatencyType.P9999]: props.addIntegrationLatencyP9999Alarm,
            [common_1.LatencyType.P100]: props.addIntegrationLatencyP100Alarm,
            [common_1.LatencyType.TM50]: props.addIntegrationLatencyTM50Alarm,
            [common_1.LatencyType.TM70]: props.addIntegrationLatencyTM70Alarm,
            [common_1.LatencyType.TM90]: props.addIntegrationLatencyTM90Alarm,
            [common_1.LatencyType.TM95]: props.addIntegrationLatencyTM95Alarm,
            [common_1.LatencyType.TM99]: props.addIntegrationLatencyTM99Alarm,
            [common_1.LatencyType.TM999]: props.addIntegrationLatencyTM999Alarm,
            [common_1.LatencyType.TM9999]: props.addIntegrationLatencyTM9999Alarm,
            [common_1.LatencyType.TM95_TOP]: props.addIntegrationLatencyTM95OutlierAlarm,
            [common_1.LatencyType.TM99_TOP]: props.addIntegrationLatencyTM99OutlierAlarm,
            [common_1.LatencyType.TM999_TOP]: props.addIntegrationLatencyTM999OutlierAlarm,
            [common_1.LatencyType.TM9999_TOP]: props.addIntegrationLatencyTM9999OutlierAlarm,
            [common_1.LatencyType.AVERAGE]: props.addIntegrationLatencyAverageAlarm,
        };
        Object.values(common_1.LatencyType).forEach((latencyType) => {
            this.latencyMetrics[latencyType] =
                metricFactory.metricLatencyInMillis(latencyType);
            this.integrationLatencyMetrics[latencyType] =
                metricFactory.metricIntegrationLatencyInMillis(latencyType);
        });
        for (const [latencyType, alarmDefinition] of Object.entries(latencyAlarmDefinitions)) {
            for (const disambiguator in alarmDefinition) {
                const alarmProps = alarmDefinition[disambiguator];
                const latencyTypeEnum = latencyType;
                const metric = this.latencyMetrics[latencyTypeEnum];
                const createdAlarm = this.latencyAlarmFactory.addLatencyAlarm(metric, latencyTypeEnum, alarmProps, disambiguator);
                this.latencyAnnotations.push(createdAlarm.annotation);
                this.latencyTypesToRender.push(latencyTypeEnum);
                this.addAlarm(createdAlarm);
            }
        }
        for (const [latencyType, alarmDefinition] of Object.entries(integrationLatencyAlarmDefinitions)) {
            for (const disambiguator in alarmDefinition) {
                const alarmProps = alarmDefinition[disambiguator];
                const latencyTypeEnum = latencyType;
                const metric = this.integrationLatencyMetrics[latencyTypeEnum];
                const createdAlarm = this.latencyAlarmFactory.addIntegrationLatencyAlarm(metric, latencyTypeEnum, alarmProps, disambiguator);
                this.latencyAnnotations.push(createdAlarm.annotation);
                this.latencyTypesToRender.push(latencyTypeEnum);
                this.addAlarm(createdAlarm);
            }
        }
        for (const disambiguator in props.add4xxCountAlarm) {
            const alarmProps = props.add4xxCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.error4xxCountMetric, common_1.ErrorType.ERROR, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.add4xxRateAlarm) {
            const alarmProps = props.add4xxRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.error4xxRateMetric, common_1.ErrorType.ERROR, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.add5xxCountAlarm) {
            const alarmProps = props.add5xxCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.error5xxCountMetric, common_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.add5xxRateAlarm) {
            const alarmProps = props.add5xxRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.error5xxRateMetric, common_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addLowTpsAlarm) {
            const alarmProps = props.addLowTpsAlarm[disambiguator];
            const createdAlarm = this.tpsAlarmFactory.addMinTpsAlarm(this.tpsMetric, alarmProps, disambiguator);
            this.tpsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addHighTpsAlarm) {
            const alarmProps = props.addHighTpsAlarm[disambiguator];
            const createdAlarm = this.tpsAlarmFactory.addMaxTpsAlarm(this.tpsMetric, alarmProps, disambiguator);
            this.tpsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createTpsWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createLatencyWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createErrorRateWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createTpsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLatencyWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createErrorCountWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createErrorRateWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "API Gateway V2 HTTP Endpoint",
            title: this.title,
        });
    }
    createTpsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "TPS",
            left: [this.tpsMetric],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.tpsAnnotations,
        });
    }
    createLatencyWidget(width, height) {
        const left = [];
        Array.from(new Set(this.latencyTypesToRender))
            .sort()
            .forEach((type) => {
            left.push(this.latencyMetrics[type]);
            left.push(this.integrationLatencyMetrics[type]);
        });
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency",
            left,
            leftYAxis: common_1.TimeAxisMillisFromZero,
            leftAnnotations: this.latencyAnnotations,
        });
    }
    createErrorCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors",
            left: [this.error4xxCountMetric, this.error5xxCountMetric],
            leftAnnotations: this.errorCountAnnotations,
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createErrorRateWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors (rate)",
            left: [this.error4xxRateMetric, this.error5xxRateMetric],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.errorRateAnnotations,
        });
    }
}
exports.ApiGatewayV2HttpApiMonitoring = ApiGatewayV2HttpApiMonitoring;
_a = JSII_RTTI_SYMBOL_1;
ApiGatewayV2HttpApiMonitoring[_a] = { fqn: "cdk-monitoring-constructs.ApiGatewayV2HttpApiMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,