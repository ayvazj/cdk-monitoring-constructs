"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSearchClusterMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const OpenSearchBackportedMetrics_1 = require("./OpenSearchBackportedMetrics");
const common_1 = require("../../common");
class OpenSearchClusterMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.domainMetrics = new OpenSearchBackportedMetrics_1.OpenSearchBackportedMetrics(props.domain);
        this.fillTpsWithZeroes = props.fillTpsWithZeroes ?? true;
        this.rateComputationMethod =
            props.rateComputationMethod ?? common_1.RateComputationMethod.AVERAGE;
    }
    metricSearchCount() {
        return this.domainMetrics.metric("SearchRate", {
            statistic: aws_cloudwatch_1.Stats.SUM,
        });
    }
    metricSearchRate() {
        return this.metricFactory.toRate(this.metricSearchCount(), this.rateComputationMethod, false, "requests", this.fillTpsWithZeroes);
    }
    /**
     * @deprecated use metricSearchRate
     */
    metricTps() {
        return this.metricFactory.toRate(this.metricSearchCount(), common_1.RateComputationMethod.PER_SECOND, false, "requests", this.fillTpsWithZeroes);
    }
    metricIndexingLatencyP50InMillis() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricIndexingLatency({
            statistic: common_1.MetricStatistic.P50,
            label: "P50",
        }));
    }
    metricIndexingLatencyP90InMillis() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricIndexingLatency({
            statistic: common_1.MetricStatistic.P90,
            label: "P90",
        }));
    }
    metricIndexingLatencyP99InMillis() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricIndexingLatency({
            statistic: common_1.MetricStatistic.P99,
            label: "P99",
        }));
    }
    metricSearchLatencyP50InMillis() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricSearchLatency({
            statistic: common_1.MetricStatistic.P50,
            label: "P50",
        }));
    }
    metricSearchLatencyP90InMillis() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricSearchLatency({
            statistic: common_1.MetricStatistic.P90,
            label: "P90",
        }));
    }
    metricSearchLatencyP99InMillis() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricSearchLatency({
            statistic: common_1.MetricStatistic.P99,
            label: "P99",
        }));
    }
    metricClusterStatusRed() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricClusterStatusRed({
            label: "Red",
        }));
    }
    metricClusterStatusYellow() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricClusterStatusYellow({
            label: "Yellow",
        }));
    }
    metricDiskSpaceUsageInPercent() {
        const used = this.domainMetrics.metric("ClusterUsedSpace", {
            statistic: aws_cloudwatch_1.Stats.SUM,
        });
        const free = this.domainMetrics.metric("FreeStorageSpace", {
            statistic: aws_cloudwatch_1.Stats.SUM,
        });
        return this.metricFactory.createMetricMath("100 * (used/(used+free))", { used, free }, "Disk Usage");
    }
    metricCpuUsage() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricCPUUtilization({
            label: "CPU Usage",
        }));
    }
    metricMasterCpuUsage() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricMasterCPUUtilization({
            label: "Master CPU Usage",
        }));
    }
    metricJvmMemoryPressure() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricJVMMemoryPressure({
            label: "JVM Memory Pressure",
        }));
    }
    metricMasterJvmMemoryPressure() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricMasterJVMMemoryPressure({
            label: "Master JVM Memory Pressure",
        }));
    }
    metricClusterIndexWritesBlocked() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricClusterIndexWritesBlocked({
            label: "Index Writes Blocked",
        }));
    }
    /**
     * @deprecated use metricClusterIndexWritesBlocked instead
     */
    metricClusterIndexWriteBlocked() {
        return this.metricClusterIndexWritesBlocked();
    }
    metricNodes() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricNodes({
            label: "Nodes",
        }));
    }
    metricAutomatedSnapshotFailure() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricAutomatedSnapshotFailure({
            label: "Automated Snapshot Failures",
        }));
    }
    metricKmsKeyError() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricKMSKeyError({
            label: "KMS Key Error",
        }));
    }
    metricKmsKeyInaccessible() {
        return this.metricFactory.adaptMetric(this.domainMetrics.metricKMSKeyInaccessible({
            label: "KMS Key Inaccessible",
        }));
    }
}
exports.OpenSearchClusterMetricFactory = OpenSearchClusterMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
OpenSearchClusterMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.OpenSearchClusterMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,