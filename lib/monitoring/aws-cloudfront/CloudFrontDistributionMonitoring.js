"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFrontDistributionMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const CloudFrontDistributionMetricFactory_1 = require("./CloudFrontDistributionMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class CloudFrontDistributionMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope);
        const namedConstruct = props.distribution;
        const fallbackConstructName = namedConstruct.distributionId;
        this.namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct,
            fallbackConstructName,
        });
        this.title = this.namingStrategy.resolveHumanReadableName();
        this.distributionUrl = scope
            .createAwsConsoleUrlFactory()
            .getCloudFrontDistributionUrl(namedConstruct.distributionId);
        this.alarmFactory = this.createAlarmFactory(this.namingStrategy.resolveAlarmFriendlyName());
        this.errorAlarmFactory = new common_1.ErrorAlarmFactory(this.alarmFactory);
        this.tpsAlarmFactory = new common_1.TpsAlarmFactory(this.alarmFactory);
        this.errorRateAnnotations = [];
        this.tpsAnnotations = [];
        const metricFactory = new CloudFrontDistributionMetricFactory_1.CloudFrontDistributionMetricFactory(scope.createMetricFactory(), props);
        this.tpsMetric = metricFactory.metricRequestTps();
        this.downloadedBytesMetric = metricFactory.metricTotalBytesDownloaded();
        this.uploadedBytesMetric = metricFactory.metricTotalBytesUploaded();
        this.error4xxRate = metricFactory.metric4xxErrorRateAverage();
        this.error5xxRate = metricFactory.metric5xxErrorRateAverage();
        this.additionalMetricsEnabled = props.additionalMetricsEnabled ?? true;
        if (this.additionalMetricsEnabled) {
            this.cacheHitRate = metricFactory.metricCacheHitRateAverageInPercent();
        }
        for (const disambiguator in props.addLowTpsAlarm) {
            const alarmProps = props.addLowTpsAlarm[disambiguator];
            const createdAlarm = this.tpsAlarmFactory.addMinTpsAlarm(this.tpsMetric, alarmProps, disambiguator);
            this.tpsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addHighTpsAlarm) {
            const alarmProps = props.addHighTpsAlarm[disambiguator];
            const createdAlarm = this.tpsAlarmFactory.addMaxTpsAlarm(this.tpsMetric, alarmProps, disambiguator);
            this.tpsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addError4xxRate) {
            const alarmProps = props.addError4xxRate[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.error4xxRate, common_1.ErrorType.ERROR, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addFault5xxRate) {
            const alarmProps = props.addFault5xxRate[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.error5xxRate, common_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        if (props.useCreatedAlarms) {
            props.useCreatedAlarms.consume(this.createdAlarms());
        }
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createTpsWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
            this.createErrorRateWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        if (this.additionalMetricsEnabled) {
            return [
                this.createTitleWidget(),
                this.createTpsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createCacheWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createTrafficWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createErrorRateWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            ];
        }
        else {
            return [
                this.createTitleWidget(),
                this.createTpsWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
                this.createTrafficWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
                this.createErrorRateWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
            ];
        }
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "CloudFront Distribution",
            title: this.title,
            goToLinkUrl: this.distributionUrl,
        });
    }
    createTpsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "TPS",
            left: [this.tpsMetric],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.tpsAnnotations,
        });
    }
    createCacheWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Hit Rate",
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            left: [this.cacheHitRate],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
        });
    }
    createTrafficWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Traffic",
            left: [this.downloadedBytesMetric, this.uploadedBytesMetric],
            leftYAxis: common_1.SizeAxisBytesFromZero,
        });
    }
    createErrorRateWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors (rate)",
            left: [this.error4xxRate, this.error5xxRate],
            leftAnnotations: this.errorRateAnnotations,
            leftYAxis: common_1.RateAxisFromZero,
        });
    }
}
exports.CloudFrontDistributionMonitoring = CloudFrontDistributionMonitoring;
_a = JSII_RTTI_SYMBOL_1;
CloudFrontDistributionMonitoring[_a] = { fqn: "cdk-monitoring-constructs.CloudFrontDistributionMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,