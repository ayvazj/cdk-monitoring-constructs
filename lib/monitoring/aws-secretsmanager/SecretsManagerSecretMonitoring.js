"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretsManagerSecretMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const SecretsManagerMetricsPublisher_1 = require("./SecretsManagerMetricsPublisher");
const SecretsManagerSecretMetricFactory_1 = require("./SecretsManagerSecretMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class SecretsManagerSecretMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope);
        const publisher = SecretsManagerMetricsPublisher_1.SecretsManagerMetricsPublisher.getInstance(scope);
        publisher.addSecret(props.secret);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.secret,
            fallbackConstructName: props.secret.secretName,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.showLastRotationWidget = !!(props.showLastRotationWidget || props.addDaysSinceLastRotationAlarm);
        const metricFactory = new SecretsManagerSecretMetricFactory_1.SecretsManagerSecretMetricFactory(scope.createMetricFactory(), props);
        this.daysSinceLastChangeMetric = metricFactory.metricDaysSinceLastChange();
        this.daysSinceLastRotationMetric =
            metricFactory.metricDaysSinceLastRotation();
        this.alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        const ageAlarmFactory = new common_1.AgeAlarmFactory(this.alarmFactory);
        this.daysSinceLastChangeAnnotations = [];
        this.daysSinceLastRotationAnnotations = [];
        for (const disambiguator in props.addDaysSinceLastChangeAlarm) {
            const alarmProps = props.addDaysSinceLastChangeAlarm[disambiguator];
            const createdAlarm = ageAlarmFactory.addDaysSinceUpdateAlarm(this.daysSinceLastChangeMetric, alarmProps, disambiguator);
            this.daysSinceLastChangeAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addDaysSinceLastRotationAlarm) {
            const alarmProps = props.addDaysSinceLastRotationAlarm[disambiguator];
            const createdAlarm = ageAlarmFactory.addDaysSinceUpdateAlarm(this.daysSinceLastRotationMetric, alarmProps, disambiguator);
            this.daysSinceLastRotationAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
        props.usePublisher?.consume(publisher.lambda);
    }
    createDaysSinceLastChangeWidget() {
        return new aws_cloudwatch_1.GraphWidget({
            width: common_1.HalfWidth,
            height: common_1.DefaultGraphWidgetHeight,
            title: "Days since last change",
            left: [this.daysSinceLastChangeMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.daysSinceLastChangeAnnotations,
        });
    }
    createDaysSinceLastRotationWidget() {
        return new aws_cloudwatch_1.GraphWidget({
            width: common_1.HalfWidth,
            height: common_1.DefaultGraphWidgetHeight,
            title: "Days since last rotation",
            left: [this.daysSinceLastRotationMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.daysSinceLastRotationAnnotations,
        });
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Secret",
            title: this.title,
        });
    }
    widgets() {
        const widgets = [
            this.createTitleWidget(),
            this.createDaysSinceLastChangeWidget(),
        ];
        if (this.showLastRotationWidget) {
            widgets.push(this.createDaysSinceLastRotationWidget());
        }
        return widgets;
    }
    summaryWidgets() {
        // TODO verify dimensions, mainly height
        return this.widgets();
    }
}
exports.SecretsManagerSecretMonitoring = SecretsManagerSecretMonitoring;
_a = JSII_RTTI_SYMBOL_1;
SecretsManagerSecretMonitoring[_a] = { fqn: "cdk-monitoring-constructs.SecretsManagerSecretMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,