"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WafV2MetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const MetricNamespace = "AWS/WAFV2";
const AllRulesDimensionValue = "ALL";
/**
 * https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html
 */
class WafV2MetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.dimensions = {
            Rule: AllRulesDimensionValue,
            WebACL: props.acl.name,
            ...(props.region && { Region: props.region }),
        };
    }
    metricAllowedRequests() {
        return this.metricFactory.createMetric("AllowedRequests", common_1.MetricStatistic.SUM, "Allowed", this.dimensions, undefined, MetricNamespace);
    }
    metricBlockedRequests() {
        return this.metricFactory.createMetric("BlockedRequests", common_1.MetricStatistic.SUM, "Blocked", this.dimensions, undefined, MetricNamespace);
    }
    metricBlockedRequestsRate() {
        return this.metricFactory.createMetricMath("100 * (blocked / (allowed + blocked))", {
            allowed: this.metricAllowedRequests(),
            blocked: this.metricBlockedRequests(),
        }, "Blocked (rate)");
    }
}
exports.WafV2MetricFactory = WafV2MetricFactory;
_a = JSII_RTTI_SYMBOL_1;
WafV2MetricFactory[_a] = { fqn: "cdk-monitoring-constructs.WafV2MetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FmVjJNZXRyaWNGYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiV2FmVjJNZXRyaWNGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEseUNBQThEO0FBRTlELE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQztBQUNwQyxNQUFNLHNCQUFzQixHQUFHLEtBQUssQ0FBQztBQVdyQzs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBSTdCLFlBQVksYUFBNEIsRUFBRSxLQUE4QjtRQUN0RSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsVUFBVSxHQUFHO1lBQ2hCLElBQUksRUFBRSxzQkFBc0I7WUFDNUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSTtZQUN0QixHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDOUMsQ0FBQztJQUNKLENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FDcEMsaUJBQWlCLEVBQ2pCLHdCQUFlLENBQUMsR0FBRyxFQUNuQixTQUFTLEVBQ1QsSUFBSSxDQUFDLFVBQVUsRUFDZixTQUFTLEVBQ1QsZUFBZSxDQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVELHFCQUFxQjtRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUNwQyxpQkFBaUIsRUFDakIsd0JBQWUsQ0FBQyxHQUFHLEVBQ25CLFNBQVMsRUFDVCxJQUFJLENBQUMsVUFBVSxFQUNmLFNBQVMsRUFDVCxlQUFlLENBQ2hCLENBQUM7SUFDSixDQUFDO0lBRUQseUJBQXlCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FDeEMsdUNBQXVDLEVBQ3ZDO1lBQ0UsT0FBTyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUNyQyxPQUFPLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1NBQ3RDLEVBQ0QsZ0JBQWdCLENBQ2pCLENBQUM7SUFDSixDQUFDOztBQTVDSCxnREE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaW1lbnNpb25IYXNoIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgeyBDZm5XZWJBQ0wgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXdhZnYyXCI7XG5pbXBvcnQgeyBNZXRyaWNGYWN0b3J5LCBNZXRyaWNTdGF0aXN0aWMgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmNvbnN0IE1ldHJpY05hbWVzcGFjZSA9IFwiQVdTL1dBRlYyXCI7XG5jb25zdCBBbGxSdWxlc0RpbWVuc2lvblZhbHVlID0gXCJBTExcIjtcblxuZXhwb3J0IGludGVyZmFjZSBXYWZWMk1ldHJpY0ZhY3RvcnlQcm9wcyB7XG4gIHJlYWRvbmx5IGFjbDogQ2ZuV2ViQUNMO1xuXG4gIC8qKlxuICAgKiBSZXF1aXJlZCBpZiBhY2wgaGFzIGEgXCJSRUdJT05BTFwiIHNjb3BlLlxuICAgKi9cbiAgcmVhZG9ubHkgcmVnaW9uPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS93YWYvbGF0ZXN0L2RldmVsb3Blcmd1aWRlL21vbml0b3JpbmctY2xvdWR3YXRjaC5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBXYWZWMk1ldHJpY0ZhY3Rvcnkge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbWV0cmljRmFjdG9yeTogTWV0cmljRmFjdG9yeTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGRpbWVuc2lvbnM6IERpbWVuc2lvbkhhc2g7XG5cbiAgY29uc3RydWN0b3IobWV0cmljRmFjdG9yeTogTWV0cmljRmFjdG9yeSwgcHJvcHM6IFdhZlYyTWV0cmljRmFjdG9yeVByb3BzKSB7XG4gICAgdGhpcy5tZXRyaWNGYWN0b3J5ID0gbWV0cmljRmFjdG9yeTtcbiAgICB0aGlzLmRpbWVuc2lvbnMgPSB7XG4gICAgICBSdWxlOiBBbGxSdWxlc0RpbWVuc2lvblZhbHVlLFxuICAgICAgV2ViQUNMOiBwcm9wcy5hY2wubmFtZSxcbiAgICAgIC4uLihwcm9wcy5yZWdpb24gJiYgeyBSZWdpb246IHByb3BzLnJlZ2lvbiB9KSxcbiAgICB9O1xuICB9XG5cbiAgbWV0cmljQWxsb3dlZFJlcXVlc3RzKCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljKFxuICAgICAgXCJBbGxvd2VkUmVxdWVzdHNcIixcbiAgICAgIE1ldHJpY1N0YXRpc3RpYy5TVU0sXG4gICAgICBcIkFsbG93ZWRcIixcbiAgICAgIHRoaXMuZGltZW5zaW9ucyxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIE1ldHJpY05hbWVzcGFjZVxuICAgICk7XG4gIH1cblxuICBtZXRyaWNCbG9ja2VkUmVxdWVzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWMoXG4gICAgICBcIkJsb2NrZWRSZXF1ZXN0c1wiLFxuICAgICAgTWV0cmljU3RhdGlzdGljLlNVTSxcbiAgICAgIFwiQmxvY2tlZFwiLFxuICAgICAgdGhpcy5kaW1lbnNpb25zLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgTWV0cmljTmFtZXNwYWNlXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY0Jsb2NrZWRSZXF1ZXN0c1JhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWNNYXRoKFxuICAgICAgXCIxMDAgKiAoYmxvY2tlZCAvIChhbGxvd2VkICsgYmxvY2tlZCkpXCIsXG4gICAgICB7XG4gICAgICAgIGFsbG93ZWQ6IHRoaXMubWV0cmljQWxsb3dlZFJlcXVlc3RzKCksXG4gICAgICAgIGJsb2NrZWQ6IHRoaXMubWV0cmljQmxvY2tlZFJlcXVlc3RzKCksXG4gICAgICB9LFxuICAgICAgXCJCbG9ja2VkIChyYXRlKVwiXG4gICAgKTtcbiAgfVxufVxuIl19