"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisFirehoseMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const KinesisFirehoseMetricFactory_1 = require("./KinesisFirehoseMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class KinesisFirehoseMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: props.deliveryStreamName,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.streamUrl = scope
            .createAwsConsoleUrlFactory()
            .getKinesisFirehoseDeliveryStreamUrl(props.deliveryStreamName);
        const metricFactory = new KinesisFirehoseMetricFactory_1.KinesisFirehoseMetricFactory(scope.createMetricFactory(), props);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.kinesisAlarmFactory = new common_1.KinesisAlarmFactory(alarmFactory);
        this.recordCountAnnotations = [];
        this.incomingLimitAnnotations = [{ value: 1, label: "100% usage" }];
        this.incomingBytesMetric = metricFactory.metricIncomingBytes();
        this.incomingRecordsMetric = metricFactory.metricIncomingRecordCount();
        this.throttledRecordsMetric = metricFactory.metricThrottledRecordCount();
        this.successfulConversionMetric =
            metricFactory.metricSuccessfulConversionCount();
        this.failedConversionMetric = metricFactory.metricFailedConversionCount();
        this.putRecordLatency = metricFactory.metricPutRecordLatencyP90InMillis();
        this.putRecordBatchLatency =
            metricFactory.metricPutRecordBatchLatencyP90InMillis();
        this.incomingBytesToLimitRate =
            metricFactory.metricIncomingBytesToLimitRate();
        this.incomingRecordsToLimitRate =
            metricFactory.metricIncomingRecordsToLimitRate();
        this.incomingPutRequestsToLimitRate =
            metricFactory.metricIncomingPutRequestsToLimitRate();
        for (const disambiguator in props.addRecordsThrottledAlarm) {
            const alarmProps = props.addRecordsThrottledAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addPutRecordsThrottledAlarm(this.throttledRecordsMetric, alarmProps, disambiguator);
            this.recordCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addIncomingBytesExceedThresholdAlarm) {
            const alarmProps = props.addIncomingBytesExceedThresholdAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addFirehoseStreamExceedSafetyThresholdAlarm(this.incomingBytesToLimitRate, "IncomingBytes", "BytesPerSecondLimit", alarmProps, disambiguator);
            this.incomingLimitAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addIncomingRecordsExceedThresholdAlarm) {
            const alarmProps = props.addIncomingRecordsExceedThresholdAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addFirehoseStreamExceedSafetyThresholdAlarm(this.incomingRecordsToLimitRate, "IncomingRecords", "RecordsPerSecondLimit", alarmProps, disambiguator);
            this.incomingLimitAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addIncomingPutRequestsExceedThresholdAlarm) {
            const alarmProps = props.addIncomingPutRequestsExceedThresholdAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addFirehoseStreamExceedSafetyThresholdAlarm(this.incomingPutRequestsToLimitRate, "IncomingPutRequests", "PutRequestsPerSecondLimit", alarmProps, disambiguator);
            this.incomingLimitAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createIncomingRecordWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
            this.createConversionWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createIncomingRecordWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLatencyWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createConversionWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLimitWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Firehose Delivery Stream",
            title: this.title,
            goToLinkUrl: this.streamUrl,
        });
    }
    createIncomingRecordWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Records",
            left: [this.incomingRecordsMetric, this.throttledRecordsMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.recordCountAnnotations,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency (P90)",
            left: [this.putRecordLatency, this.putRecordBatchLatency],
            leftYAxis: common_1.TimeAxisMillisFromZero,
        });
    }
    createConversionWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Conversions",
            left: [this.successfulConversionMetric, this.failedConversionMetric],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createLimitWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Limits (rate)",
            left: [
                this.incomingBytesToLimitRate.with({ label: "Bytes" }),
                this.incomingRecordsToLimitRate.with({ label: "Records" }),
                this.incomingPutRequestsToLimitRate.with({ label: "PutRequests" }),
            ],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.incomingLimitAnnotations,
        });
    }
}
exports.KinesisFirehoseMonitoring = KinesisFirehoseMonitoring;
_a = JSII_RTTI_SYMBOL_1;
KinesisFirehoseMonitoring[_a] = { fqn: "cdk-monitoring-constructs.KinesisFirehoseMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,