"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisDataStreamMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const KinesisDataStreamMetricFactory_1 = require("./KinesisDataStreamMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class KinesisDataStreamMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: props.streamName,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.streamUrl = scope
            .createAwsConsoleUrlFactory()
            .getKinesisDataStreamUrl(props.streamName);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.kinesisAlarmFactory = new common_1.KinesisAlarmFactory(alarmFactory);
        this.provisionedCapacityAnnotations = [];
        this.ageAnnotations = [];
        this.recordCountAnnotations = [];
        const metricFactory = new KinesisDataStreamMetricFactory_1.KinesisDataStreamMetricFactory(scope.createMetricFactory(), props);
        this.metricGetRecordSumBytes = metricFactory.metricGetRecordsSumBytes();
        this.metricGetRecordsIteratorAge =
            metricFactory.metricGetRecordsIteratorAgeMaxMs();
        this.metricGetRecordsLatencyAverage =
            metricFactory.metricGetRecordsLatencyAverageMs();
        this.metricGetRecordsSumCount = metricFactory.metricGetRecordsSumCount();
        this.metricGetRecordsSuccessCount =
            metricFactory.metricGetRecordsSuccessCount();
        this.incomingDataSumBytesMetric =
            metricFactory.metricIncomingDataSumBytes();
        this.incomingDataSumCountMetric =
            metricFactory.metricIncomingDataSumCount();
        this.putRecordSumBytesMetric = metricFactory.metricPutRecordSumBytes();
        this.putRecordLatencyAverageMetric =
            metricFactory.metricPutRecordLatencyAverageMs();
        this.putRecordSuccessCountMetric =
            metricFactory.metricPutRecordSuccessCount();
        this.putRecordsSumBytesMetric = metricFactory.metricPutRecordsSumBytes();
        this.putRecordsLatencyAverageMetric =
            metricFactory.metricPutRecordsLatencyAverageMs();
        this.putRecordsSuccessCountMetric =
            metricFactory.metricPutRecordsSuccessCount();
        this.putRecordsTotalRecordsCountMetric =
            metricFactory.metricPutRecordsTotalRecordsCount();
        this.putRecordsSuccessfulRecordsCountMetric =
            metricFactory.metricPutRecordsSuccessfulRecordsCount();
        this.putRecordsThrottledRecordsCountMetric =
            metricFactory.metricPutRecordsThrottledRecordsCount();
        this.putRecordsFailedRecordsCountMetric =
            metricFactory.metricPutRecordsFailedRecordsCount();
        this.readProvisionedThroughputExceededMetric =
            metricFactory.metricReadProvisionedThroughputExceeded();
        this.writeProvisionedThroughputExceededMetric =
            metricFactory.metricWriteProvisionedThroughputExceeded();
        for (const disambiguator in props.addIteratorMaxAgeAlarm) {
            const alarmProps = props.addIteratorMaxAgeAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addIteratorMaxAgeAlarm(this.metricGetRecordsIteratorAge, alarmProps, disambiguator);
            this.ageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addPutRecordsThrottledAlarm) {
            const alarmProps = props.addPutRecordsThrottledAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addPutRecordsThrottledAlarm(this.putRecordsThrottledRecordsCountMetric, alarmProps, disambiguator);
            this.recordCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addPutRecordsFailedAlarm) {
            const alarmProps = props.addPutRecordsFailedAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addPutRecordsFailedAlarm(this.putRecordsFailedRecordsCountMetric, alarmProps, disambiguator);
            this.recordCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addReadProvisionedThroughputExceededAlarm) {
            const alarmProps = props.addReadProvisionedThroughputExceededAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addProvisionedReadThroughputExceededAlarm(this.readProvisionedThroughputExceededMetric, alarmProps, disambiguator);
            this.provisionedCapacityAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addWriteProvisionedThroughputExceededAlarm) {
            const alarmProps = props.addWriteProvisionedThroughputExceededAlarm[disambiguator];
            const createdAlarm = this.kinesisAlarmFactory.addProvisionedWriteThroughputExceededAlarm(this.writeProvisionedThroughputExceededMetric, alarmProps, disambiguator);
            this.provisionedCapacityAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            new aws_cloudwatch_1.Row(this.createIncomingDataWidget(common_1.QuarterWidth, common_1.DefaultSummaryWidgetHeight), this.createIteratorAgeWidget(common_1.QuarterWidth, common_1.DefaultSummaryWidgetHeight), this.createLatencyWidget(common_1.QuarterWidth, common_1.DefaultSummaryWidgetHeight), this.createCapacityWidget(common_1.QuarterWidth, common_1.DefaultSummaryWidgetHeight)),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            new aws_cloudwatch_1.Row(this.createIncomingDataWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight), this.createIteratorAgeWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight), this.createLatencyWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight), this.createCapacityWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight)),
            this.createFirstAdditionalRow(),
            this.createSecondAdditionalRow(),
        ];
    }
    createFirstAdditionalRow() {
        return new aws_cloudwatch_1.Row(this.createRecordSizeWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight), this.createOperationWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight));
    }
    createSecondAdditionalRow() {
        return new aws_cloudwatch_1.Row(this.createRecordNumberWidget(common_1.FullWidth, common_1.DefaultGraphWidgetHeight));
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Kinesis Data Stream",
            title: this.title,
            goToLinkUrl: this.streamUrl,
        });
    }
    createIncomingDataWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Incoming",
            left: [this.incomingDataSumCountMetric],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createIteratorAgeWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Iterator",
            left: [this.metricGetRecordsIteratorAge],
            leftAnnotations: this.ageAnnotations,
            leftYAxis: common_1.TimeAxisMillisFromZero,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency (Average)",
            left: [
                this.metricGetRecordsLatencyAverage,
                this.putRecordLatencyAverageMetric,
                this.putRecordsLatencyAverageMetric,
            ],
            leftYAxis: common_1.TimeAxisMillisFromZero,
        });
    }
    createCapacityWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Provisioned Capacity Exceeded",
            left: [
                this.readProvisionedThroughputExceededMetric,
                this.writeProvisionedThroughputExceededMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.provisionedCapacityAnnotations,
        });
    }
    createRecordSizeWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Bytes",
            left: [
                this.metricGetRecordSumBytes,
                this.putRecordSumBytesMetric,
                this.putRecordsSumBytesMetric,
            ],
            leftYAxis: common_1.SizeAxisBytesFromZero,
        });
    }
    createOperationWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Successful Operations",
            left: [
                this.metricGetRecordsSuccessCount,
                this.putRecordSuccessCountMetric,
                this.putRecordsSuccessCountMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
    createRecordNumberWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Records",
            left: [
                this.metricGetRecordsSumCount,
                this.putRecordsTotalRecordsCountMetric,
                this.putRecordsSuccessfulRecordsCountMetric,
                this.putRecordsFailedRecordsCountMetric,
                this.putRecordsThrottledRecordsCountMetric,
            ],
            leftAnnotations: this.recordCountAnnotations,
            leftYAxis: common_1.CountAxisFromZero,
        });
    }
}
exports.KinesisDataStreamMonitoring = KinesisDataStreamMonitoring;
_a = JSII_RTTI_SYMBOL_1;
KinesisDataStreamMonitoring[_a] = { fqn: "cdk-monitoring-constructs.KinesisDataStreamMonitoring", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,