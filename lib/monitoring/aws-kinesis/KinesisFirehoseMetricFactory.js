"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisFirehoseMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const FirehoseNamespace = "AWS/Firehose";
/**
 * @see https://docs.aws.amazon.com/firehose/latest/dev/monitoring-with-cloudwatch-metrics.html
 */
class KinesisFirehoseMetricFactory {
    constructor(metricFactory, props) {
        this.metricFactory = metricFactory;
        this.dimensionsMap = {
            DeliveryStreamName: props.deliveryStreamName,
        };
    }
    metricSuccessfulConversionCount() {
        return this.metricFactory.createMetric("SucceedConversion.Records", common_1.MetricStatistic.SUM, "Succeed", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricFailedConversionCount() {
        return this.metricFactory.createMetric("FailedConversion.Records", common_1.MetricStatistic.SUM, "Failed", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricIncomingBytes() {
        return this.metricFactory.createMetric("IncomingBytes", common_1.MetricStatistic.SUM, "Incoming (bytes)", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricIncomingPutRequests() {
        return this.metricFactory.createMetric("IncomingPutRequests", common_1.MetricStatistic.SUM, "Incoming (PutRequest)", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricIncomingRecordCount() {
        return this.metricFactory.createMetric("IncomingRecords", common_1.MetricStatistic.SUM, "Incoming (Records)", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricThrottledRecordCount() {
        return this.metricFactory.createMetric("ThrottledRecords", common_1.MetricStatistic.SUM, "Throttled", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricPutRecordLatencyP90InMillis() {
        return this.metricFactory.createMetric("PutRecord.Latency", common_1.MetricStatistic.P90, "PutRecord P90", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricPutRecordBatchLatencyP90InMillis() {
        return this.metricFactory.createMetric("PutRecordBatch.Latency", common_1.MetricStatistic.P90, "PutRecordBatch P90", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricIncomingBytesToLimitRate() {
        return this.metricFactory.createMetricMath("(bytes_in / PERIOD(bytes_in)) / bytes_max", {
            bytes_in: this.metricIncomingBytes(),
            bytes_max: this.metricBytesPerSecondLimit(),
        }, "Incoming Bytes / Limit");
    }
    metricIncomingRecordsToLimitRate() {
        return this.metricFactory.createMetricMath("(records_in / PERIOD(records_in)) / records_max", {
            records_in: this.metricIncomingRecordCount(),
            records_max: this.metricRecordsPerSecondLimit(),
        }, "Incoming Records / Limit");
    }
    metricIncomingPutRequestsToLimitRate() {
        return this.metricFactory.createMetricMath("(requests_in / PERIOD(requests_in)) / requests_max", {
            requests_in: this.metricIncomingPutRequests(),
            requests_max: this.metricPutRequestsPerSecondLimit(),
        }, "Incoming PutRequests / Limit");
    }
    metricBytesPerSecondLimit() {
        return this.metricFactory.createMetric("BytesPerSecondLimit", common_1.MetricStatistic.AVERAGE, "Incoming Bytes/s Limit", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricRecordsPerSecondLimit() {
        return this.metricFactory.createMetric("RecordsPerSecondLimit", common_1.MetricStatistic.AVERAGE, "Records/s Limit", this.dimensionsMap, undefined, FirehoseNamespace);
    }
    metricPutRequestsPerSecondLimit() {
        return this.metricFactory.createMetric("PutRequestsPerSecondLimit", common_1.MetricStatistic.AVERAGE, "PutRequests/s Limit", this.dimensionsMap, undefined, FirehoseNamespace);
    }
}
exports.KinesisFirehoseMetricFactory = KinesisFirehoseMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
KinesisFirehoseMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.KinesisFirehoseMetricFactory", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,